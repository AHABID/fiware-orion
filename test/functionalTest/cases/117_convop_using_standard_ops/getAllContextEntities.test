# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
ExtraOp getAllContextEntities:  GET /v1/contextEntities

--SHELL-INIT--
dbInit CB
dbInit CP1
brokerStart CB
brokerStart CP1

--SHELL--

#
# 01. GET /v1/contextEntities/E1 and see it fail
# 02. Update/APPEND E1/T1/A1
# 03. GET /v1/contextEntities/E1 and see it work
# 04. GET /v1/contextEntities/E1?attributesFormat=object and see it work
# 05. GET /v1/contextEntities/E1?entity::type=T1 and see it work
# 06. GET /v1/contextEntities/E1?exist=entity::type and see it work
# 07. GET /v1/contextEntities/E1?entity::type=T2 and see it fail
# 08. GET /v1/contextEntities/E1?!exist=entity::type and see it fail
# 09. Register E1/T2/A1 for CP1
# 10. GET /v1/contextEntities/E1?entity::type=T2 and see it fail (not found on CP1)
# 11. Update/APPEND E1/T2/A1 on CP1
# 12. GET /v1/contextEntities/E1?entity::type=T2 and see it work
#

echo "01. GET /v1/contextEntities/E1 and see it fail"
echo "=============================================="
orionCurl --url /v1/contextEntities/E1 --json
echo
echo


echo "02. Update/APPEND E1/T1/A1"
echo "=========================="
payload='{
  "contextElements": [
    {
      "type": "T1",
      "id":   "E1",
      "attributes": [
        {
          "name": "A1",
          "type": "string",
          "value": "02"
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload" --json
echo
echo


echo "03. GET /v1/contextEntities/E1 and see it work"
echo "=============================================="
orionCurl --url /v1/contextEntities/E1 --json
echo
echo


echo "04. GET /v1/contextEntities/E1?attributesFormat=object and see it work"
echo "======================================================================"
orionCurl --url /v1/contextEntities/E1?attributesFormat=object --json
echo
echo


echo "05. GET /v1/contextEntities/E1?entity::type=T1 and see it work"
echo "=============================================================="
orionCurl --url /v1/contextEntities/E1?entity::type=T1 --json
echo
echo


echo "06. GET /v1/contextEntities/E1?exist=entity::type and see it work"
echo "================================================================="
orionCurl --url /v1/contextEntities/E1?exist=entity::type --json
echo
echo


echo "07. GET /v1/contextEntities/E1?entity::type=T2 and see it fail"
echo "=============================================================="
orionCurl --url /v1/contextEntities/E1?entity::type=T2 --json
echo
echo


echo "08. GET /v1/contextEntities/E1?!exist=entity::type and see it fail"
echo "=================================================================="
orionCurl --url /v1/contextEntities/E1?!exist=entity::type --json
echo
echo


echo "09. Register E1/T2/A1 for CP1"
echo "============================="
payload='{
  "contextRegistrations": [
  {
    "entities": [
      {
         "type": "T2",
         "isPattern": "false",
         "id": "E1"
      }
    ],
    "attributes": [
      {
        "name": "A1",
        "type": "string",
        "isDomain": "false"
      }
    ],
    "providingApplication": "http://kz.tid.es/abc"
    }
 ],
 "duration": "P1M"
}'
orionCurl --url /v1/registry/registerContext --payload "$payload" --port $CP1_PORT --json
echo
echo


echo "10. GET /v1/contextEntities/E1?entity::type=T2 and see it fail (not found on CP1)"
echo "================================================================================="
orionCurl --url /v1/contextEntities/E1?entity::type=T2 --json
echo
echo


echo "11. Update/APPEND E1/T2/A1 on CP1"
echo "================================="
payload='{
    "contextElements": [
        {
            "type" : "T2",
            "isPattern" : "false",
            "id" : "E1",
            "attributes" : [
                {
                    "name" : "A1",
                    "type" : "a",
                    "value" : "on CP1"
                }
            ]
        }
    ],
    "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload" --json
echo
echo


echo "12. GET /v1/contextEntities/E1?entity::type=T2 and see it work"
echo "=============================================================="
orionCurl --url /v1/contextEntities/E1?entity::type=T2 --json
echo
echo


--REGEXPECT--
01. GET /v1/contextEntities/E1 and see it fail
==============================================
HTTP/1.1 200 OK
Content-Length: 218
Content-Type: application/json
Date: REGEX(.*)

{
    "contextElement": {
        "id": "E1", 
        "isPattern": "false", 
        "type": ""
    }, 
    "statusCode": {
        "code": "404", 
        "details": "Entity id: /E1/", 
        "reasonPhrase": "No context element found"
    }
}


02. Update/APPEND E1/T1/A1
==========================
HTTP/1.1 200 OK
Content-Length: 383
Content-Type: application/json
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1", 
                        "type": "string", 
                        "value": ""
                    }
                ], 
                "id": "E1", 
                "isPattern": "false", 
                "type": "T1"
            }, 
            "statusCode": {
                "code": "200", 
                "reasonPhrase": "OK"
            }
        }
    ]
}


03. GET /v1/contextEntities/E1 and see it work
==============================================
HTTP/1.1 200 OK
Content-Length: 280
Content-Type: application/json
Date: REGEX(.*)

{
    "contextElement": {
        "attributes": [
            {
                "name": "A1", 
                "type": "string", 
                "value": "02"
            }
        ], 
        "id": "E1", 
        "isPattern": "false", 
        "type": "T1"
    }, 
    "statusCode": {
        "code": "200", 
        "reasonPhrase": "OK"
    }
}


04. GET /v1/contextEntities/E1?attributesFormat=object and see it work
======================================================================
HTTP/1.1 200 OK
Content-Length: 264
Content-Type: application/json
Date: REGEX(.*)

{
    "contextElement": {
        "attributes": {
            "A1": {
                "type": "string", 
                "value": "02"
            }
        }, 
        "id": "E1", 
        "isPattern": "false", 
        "type": "T1"
    }, 
    "statusCode": {
        "code": "200", 
        "reasonPhrase": "OK"
    }
}


05. GET /v1/contextEntities/E1?entity::type=T1 and see it work
==============================================================
HTTP/1.1 200 OK
Content-Length: 280
Content-Type: application/json
Date: REGEX(.*)

{
    "contextElement": {
        "attributes": [
            {
                "name": "A1", 
                "type": "string", 
                "value": "02"
            }
        ], 
        "id": "E1", 
        "isPattern": "false", 
        "type": "T1"
    }, 
    "statusCode": {
        "code": "200", 
        "reasonPhrase": "OK"
    }
}


06. GET /v1/contextEntities/E1?exist=entity::type and see it work
=================================================================
HTTP/1.1 200 OK
Content-Length: 280
Content-Type: application/json
Date: REGEX(.*)

{
    "contextElement": {
        "attributes": [
            {
                "name": "A1", 
                "type": "string", 
                "value": "02"
            }
        ], 
        "id": "E1", 
        "isPattern": "false", 
        "type": "T1"
    }, 
    "statusCode": {
        "code": "200", 
        "reasonPhrase": "OK"
    }
}


07. GET /v1/contextEntities/E1?entity::type=T2 and see it fail
==============================================================
HTTP/1.1 200 OK
Content-Length: 220
Content-Type: application/json
Date: REGEX(.*)

{
    "contextElement": {
        "id": "E1", 
        "isPattern": "false", 
        "type": "T2"
    }, 
    "statusCode": {
        "code": "404", 
        "details": "Entity id: /E1/", 
        "reasonPhrase": "No context element found"
    }
}


08. GET /v1/contextEntities/E1?!exist=entity::type and see it fail
==================================================================
HTTP/1.1 200 OK
Content-Length: 218
Content-Type: application/json
Date: REGEX(.*)

{
    "contextElement": {
        "id": "E1", 
        "isPattern": "false", 
        "type": ""
    }, 
    "statusCode": {
        "code": "404", 
        "details": "Entity id: /E1/", 
        "reasonPhrase": "No context element found"
    }
}


09. Register E1/T2/A1 for CP1
=============================
HTTP/1.1 200 OK
Content-Length: 74
Content-Type: application/json
Date: REGEX(.*)

{
    "duration": "P1M", 
    "registrationId": "REGEX([0-9a-f]{24})"
}


10. GET /v1/contextEntities/E1?entity::type=T2 and see it fail (not found on CP1)
=================================================================================
HTTP/1.1 200 OK
Content-Length: 220
Content-Type: application/json
Date: REGEX(.*)

{
    "contextElement": {
        "id": "E1", 
        "isPattern": "false", 
        "type": "T2"
    }, 
    "statusCode": {
        "code": "404", 
        "details": "Entity id: /E1/", 
        "reasonPhrase": "No context element found"
    }
}


11. Update/APPEND E1/T2/A1 on CP1
=================================
HTTP/1.1 200 OK
Content-Length: 378
Content-Type: application/json
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1", 
                        "type": "a", 
                        "value": ""
                    }
                ], 
                "id": "E1", 
                "isPattern": "false", 
                "type": "T2"
            }, 
            "statusCode": {
                "code": "200", 
                "reasonPhrase": "OK"
            }
        }
    ]
}


12. GET /v1/contextEntities/E1?entity::type=T2 and see it work
==============================================================
HTTP/1.1 200 OK
Content-Length: 279
Content-Type: application/json
Date: REGEX(.*)

{
    "contextElement": {
        "attributes": [
            {
                "name": "A1", 
                "type": "a", 
                "value": "on CP1"
            }
        ], 
        "id": "E1", 
        "isPattern": "false", 
        "type": "T2"
    }, 
    "statusCode": {
        "code": "200", 
        "reasonPhrase": "OK"
    }
}


--TEARDOWN--
brokerStop CB
dbDrop CB
