# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
PUT Attribute Value

--SHELL-INIT--
dbInit CB
brokerStart CB 0-255

--SHELL--

#
# 01. POST /v2/entities/E1 creating A1=1
# 02. PUT /v2/entities/E1/attrs/A1/value with erroneous JSON payload
# 03. PUT /v2/entities/E1/attrs/A1/value with JSON object as payload
# 04. Check that A1 == "that JSON object"
# 05. PUT /v2/entities/E1/attrs/A1/value with JSON array as payload
# 06. Check that A1 == "that JSON array"
# 07. PUT /v2/entities/E1/attrs/A1/value with TEXT payload "STRING"
# 08. Check that A1 == "STRING"

# 09. PUT /v2/entities/E1/attrs/A1/value with TEXT payload true
# 10. Check that A1 == true
# 11. PUT /v2/entities/E1/attrs/A1/value with TEXT payload TRUE
# 12. Check that A1 == true
# 13. PUT /v2/entities/E1/attrs/A1/value with TEXT payload True
# 14. Check that A1 == true
# 15. PUT /v2/entities/E1/attrs/A1/value with TEXT payload false
# 16. Check that A1 == false
# 17. PUT /v2/entities/E1/attrs/A1/value with TEXT payload FALSE
# 18. Check that A1 == false
# 19. PUT /v2/entities/E1/attrs/A1/value with TEXT payload False
# 20. Check that A1 == false
# 21. PUT /v2/entities/E1/attrs/A1/value with TEXT payload null
# 22. Check that A1 == null
# 23. PUT /v2/entities/E1/attrs/A1/value with TEXT payload NULL
# 24. Check that A1 == null
# 25. PUT /v2/entities/E1/attrs/A1/value with TEXT payload Null
# 26. Check that A1 == null
# 27. PUT /v2/entities/E1/attrs/A1/value with TEXT payload 123
# 28. Check that A1 == 123
# 29. PUT /v2/entities/E1/attrs/A1/value with TEXT payload 3.14
# 30. Check that A1 == 3.14
# 31. PUT /v2/entities/E1/attrs/A1/value with TEXT payload a.14 - see error
# 32. Check that A1 == 3.14 still
#

echo '01. POST /v2/entities/E1 creating A1=1'
echo '======================================'
payload='{ "A1": 1 }'
orionCurl --url /v2/entities/E1 --payload "$payload" --json
echo
echo


echo '02. PUT /v2/entities/E1/attrs/A1/value with erroneous JSON payload'
echo '=================================================================='
payload='{ "A1" }'
orionCurl --url /v2/entities/E1/attrs/A1/value --payload "$payload" -X PUT --json
echo
echo


echo '03. PUT /v2/entities/E1/attrs/A1/value with JSON object as payload'
echo '=================================================================='
payload='{ "a": "1", "b": 2 }'
orionCurl --url /v2/entities/E1/attrs/A1/value --payload "$payload" -X PUT --json
echo
echo


echo '04. Check that A1 == "that JSON object"'
echo '======================================='
orionCurl --url /v2/entities/E1/attrs/A1 --json
echo
echo


echo '05. PUT /v2/entities/E1/attrs/A1/value with JSON array as payload'
echo '================================================================='
payload='[ "a", "b", "c" ]'
orionCurl --url /v2/entities/E1/attrs/A1/value --payload "$payload" -X PUT --json
echo
echo


echo '06. Check that A1 == "that JSON array"'
echo '======================================'
orionCurl --url /v2/entities/E1/attrs/A1 --json
echo
echo


echo '07. PUT /v2/entities/E1/attrs/A1/value with TEXT payload "STRING"'
echo '================================================================='
payload='"STRING"'
orionCurl --url /v2/entities/E1/attrs/A1/value --payload "$payload" -X PUT --in text/plain --out application/json
echo
echo


echo '08. Check that A1 == "STRING"'
echo '============================='
orionCurl --url /v2/entities/E1/attrs/A1 --json
echo
echo


--REGEXPECT--
01. POST /v2/entities/E1 creating A1=1
======================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E1
Date: REGEX(.*)



02. PUT /v2/entities/E1/attrs/A1/value with erroneous JSON payload
==================================================================
HTTP/1.1 400 Bad Request
Content-Length: 75
Content-Type: application/json
Date: REGEX(.*)

{
    "description": "Errors found in incoming JSON buffer",
    "error": "BadRequest"
}


03. PUT /v2/entities/E1/attrs/A1/value with JSON object as payload
==================================================================
HTTP/1.1 204 No Content
Content-Length: 0
Date: REGEX(.*)



04. Check that A1 == "that JSON object"
=======================================
HTTP/1.1 200 OK
Content-Length: 65
Content-Type: application/json
Date: REGEX(.*)

{
    "A1": {
        "metadata": {},
        "type": null,
        "value": {
            "a": "1",
            "b": 2.0
        }
    }
}


05. PUT /v2/entities/E1/attrs/A1/value with JSON array as payload
=================================================================
HTTP/1.1 204 No Content
Content-Length: 0
Date: REGEX(.*)



06. Check that A1 == "that JSON array"
======================================
HTTP/1.1 200 OK
Content-Length: 56
Content-Type: application/json
Date: REGEX(.*)

{
    "A1": {
        "metadata": {},
        "type": null,
        "value": [
            "a",
            "b",
            "c"
        ]
    }
}


07. PUT /v2/entities/E1/attrs/A1/value with TEXT payload "STRING"
=================================================================
HTTP/1.1 204 No Content
Content-Length: 0
Date: REGEX(.*)



08. Check that A1 == "STRING"
=============================
HTTP/1.1 200 OK
Content-Length: 51
Content-Type: application/json
Date: REGEX(.*)

{
    "A1": {
        "metadata": {},
        "type": null,
        "value": "STRING"
    }
}


--TEARDOWN--
brokerStop CB
dbDrop CB
