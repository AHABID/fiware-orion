# Copyright 2014 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# fermin at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

#
# What to test:
#
# One convenience operation for each of the 4 special types used in conv ops:
#  o AppendContextElementResponse    (POST /ngsi10/contextEntities/*/attributes)
#  o ContextElementResponse          (GET /ngsi10/contextEntities/*)
#  o UpdateContextElementResponse    (PUT /ngsi10/contextEntities/*)
#  o ContextAttributeResponse        (GET /ngsi10/contextEntities/*/attributes/*)
#

--NAME--
ConvOps with attributes as JSON objects
--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--
echo "1. Create E1/A1 using conv op POST /ngsi10/contextEntities/E1/attributes"
url="/ngsi10/contextEntities/E1/attributes"
payload='<?xml version="1.0" encoding="UTF-8"?>
<appendContextElementRequest>
  <contextAttributeList>
    <contextAttribute>
      <name>A1</name>
      <type>Attr</type>
      <contextValue>1</contextValue>
    </contextAttribute>
  </contextAttributeList>
</appendContextElementRequest>'
orionCurl --url "$url" --payload "$payload" --urlParams attributesFormat=object --out json
echo
echo


echo "2. query E1/A1 using conv op GET /ngsi10/contextEntities/E1 (with attributesFormat=object)"
url="/ngsi10/contextEntities/E1"
orionCurl --url "$url" --urlParams attributesFormat=object --out json
echo
echo

echo "3. query E1/A1 using conv op GET /ngsi10/contextEntities/E1 (without attributesFormat=object)"
orionCurl --url "$url" --out json
echo
echo


echo "4. Update E1/A1 using conv op PUT /ngsi10/contextEntities/E1/attributes (fails as A1 has no type, right?)"
url="/ngsi10/contextEntities/E1"
payload='<?xml version="1.0" encoding="UTF-8"?>
<updateContextElementRequest>
  <attributeDomainName></attributeDomainName>
  <contextAttributeList>
    <contextAttribute>
      <name>A1</name>
      <type>degree</type>
      <contextValue>99</contextValue>
    </contextAttribute>
  </contextAttributeList>
</updateContextElementRequest>'
orionCurl --url "$url" --payload "$payload" --urlParams attributesFormat=object --out json -X PUT
echo
echo

echo "5. Conventional update, giving a type to E1/A1"
url="/ngsi10/updateContext"
payload='<?xml version="1.0" encoding="UTF-8"?>
<updateContextRequest>
  <contextElementList>
    <contextElement>
      <entityId type="T" isPattern="false">
        <id>E1</id>
      </entityId>
      <contextAttributeList>
        <contextAttribute>
          <name>A1</name>
          <type>T1</type>
          <contextValue>98</contextValue>
        </contextAttribute>
      </contextAttributeList>
    </contextElement>
  </contextElementList>
  <updateAction>APPEND</updateAction>
</updateContextRequest>'
orionCurl --url "$url" --payload "$payload" --out json
echo
echo


echo "6. Update E1/A1 using conv op PUT /ngsi10/contextEntities/E1/attributes (works now as A1 has a type)"
url="/ngsi10/contextEntities/E1"
payload='<?xml version="1.0" encoding="UTF-8"?>
<updateContextElementRequest>
  <attributeDomainName></attributeDomainName>
  <contextAttributeList>
    <contextAttribute>
      <name>A1</name>
      <type>degree</type>
      <contextValue>99</contextValue>
    </contextAttribute>
  </contextAttributeList>
</updateContextElementRequest>'
orionCurl --url "$url" --payload "$payload" --urlParams attributesFormat=object --out json -X PUT
echo
echo


echo "7. query E1/A1 using conv op GET /ngsi10/contextEntities/E1/attributes/A1 (with attributesFormat=object)"
url="/ngsi10/contextEntities/E1/attributes/A1"
orionCurl --url "$url" --urlParams attributesFormat=object --out json
echo
echo


echo "8. query E1/A1 using conv op GET /ngsi10/contextEntities/E1/attributes/A1 (without attributesFormat=object)"
url="/ngsi10/contextEntities/E1/attributes/A1"
orionCurl --url "$url" --out json
echo
echo


--REGEXPECT--
1. Create E1/A1 using conv op POST /ngsi10/contextEntities/E1/attributes
HTTP/1.1 200 OK
Content-Length: 239
Content-Type: application/json
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "attributes": {
                "A1": {
                    "type": "Attr", 
                    "value": ""
                }
            }, 
            "statusCode": {
                "code": "200", 
                "reasonPhrase": "OK"
            }
        }
    ]
}


2. query E1/A1 using conv op GET /ngsi10/contextEntities/E1 (with attributesFormat=object)
HTTP/1.1 200 OK
Content-Length: 259
Content-Type: application/json
Date: REGEX(.*)

{
    "contextElement": {
        "attributes": {
            "A1": {
                "type": "Attr", 
                "value": "1"
            }
        }, 
        "id": "E1", 
        "isPattern": "false", 
        "type": ""
    }, 
    "statusCode": {
        "code": "200", 
        "reasonPhrase": "OK"
    }
}


3. query E1/A1 using conv op GET /ngsi10/contextEntities/E1 (without attributesFormat=object)
HTTP/1.1 200 OK
Content-Length: 275
Content-Type: application/json
Date: REGEX(.*)

{
    "contextElement": {
        "attributes": [
            {
                "name": "A1", 
                "type": "Attr", 
                "value": "1"
            }
        ], 
        "id": "E1", 
        "isPattern": "false", 
        "type": ""
    }, 
    "statusCode": {
        "code": "200", 
        "reasonPhrase": "OK"
    }
}


4. Update E1/A1 using conv op PUT /ngsi10/contextEntities/E1/attributes (fails as A1 has no type, right?)
HTTP/1.1 200 OK
Content-Length: 187
Content-Type: application/json
Date: REGEX(.*)

{
    "errorCode": {
        "code": "472", 
        "details": "action: UPDATE - entity: (E1, ) - offending attribute: A1", 
        "reasonPhrase": "request parameter is invalid/not allowed"
    }
}


5. Conventional update, giving a type to E1/A1
HTTP/1.1 200 OK
Content-Length: 378
Content-Type: application/json
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1", 
                        "type": "T1", 
                        "value": ""
                    }
                ], 
                "id": "E1", 
                "isPattern": "false", 
                "type": "T"
            }, 
            "statusCode": {
                "code": "200", 
                "reasonPhrase": "OK"
            }
        }
    ]
}


6. Update E1/A1 using conv op PUT /ngsi10/contextEntities/E1/attributes (works now as A1 has a type)
HTTP/1.1 200 OK
Content-Length: 187
Content-Type: application/json
Date: REGEX(.*)

{
    WHY does this not work?
}


7. query E1/A1 using conv op GET /ngsi10/contextEntities/E1/attributes/A1 (with attributesFormat=object)
HTTP/1.1 200 OK
Content-Length: 159
Content-Type: application/json
Date: REGEX(.*)

{
    "attributes": {
        "A1": {
            "type": "Attr", 
            "value": "99"
        }
    }, 
    "statusCode": {
        "code": "200", 
        "reasonPhrase": "OK"
    }
}


8. query E1/A1 using conv op GET /ngsi10/contextEntities/E1/attributes/A1 (without attributesFormat=object)
HTTP/1.1 200 OK
Content-Length: 173
Content-Type: application/json
Date: REGEX(.*)

{
    "attributes": [
        {
            "name": "A1", 
            "type": "Attr", 
            "value": "99"
        }
    ], 
    "statusCode": {
        "code": "200", 
        "reasonPhrase": "OK"
    }
}


--TEARDOWN--
brokerStop CB
