# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
URI Param OPTIONS

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--

#
# 01. OK: Send a /version request with one valid option (count)
# 02. OK: Send a /version request with two valid options (count + normalized)
# 03. Error: Send a /version request with one invalid option (canonical)
# 04. OK: Send a /version request with ALL valid options (count, normalized, values & text)
# 05. Error: Send a /version request with ALL valid options and ONE invalid
# 06. Error: Test an arbitrary API v2 path
#

echo "01. OK: Send a /version request with one valid option (count)"
echo "============================================================="
orionCurl --url /version?options=count --json
echo
echo


echo "02. OK: Send a /version request with two valid options (count + normalized)"
echo "==========================================================================="
orionCurl --url /version?options=count,normalized --json
echo
echo


echo "03. Error: Send a /version request with one invalid option (canonical)"
echo "======================================================================"
orionCurl --url /version?options=canonical --json
echo
echo


echo "04. OK: Send a /version request with ALL valid options (count, normalized, values & text)"
echo "========================================================================================="
orionCurl --url /version?options=count,normalized,values,text --json
echo
echo


echo "05. Error: Send a /version request with ALL valid options and ONE invalid"
echo "========================================================================="
orionCurl --url /version?options=count,normalized,values,text,BAD --json
echo
echo


echo "06. Error: Test an arbitrary API v2 path"
echo "========================================"
orionCurl --url /v2/type?options=BAD --json
echo
echo


--REGEXPECT--
01. OK: Send a /version request with one valid option (count)
=============================================================
HTTP/1.1 200 OK
Content-Length: REGEX(\d+)
Content-Type: application/json
Date: REGEX(.*)

{
    "orion": {
        "compile_time": "REGEX(.*)",
        "compiled_by": "REGEX(.*)",
        "compiled_in": "REGEX(.*)",
        "git_hash": "REGEX(([0-9a-f]{40}|nogitversion))",
        "uptime": "REGEX(.*)",
        "version": "REGEX(.*)"
    }
}


02. OK: Send a /version request with two valid options (count + normalized)
===========================================================================
HTTP/1.1 200 OK
Content-Length: REGEX(\d+)
Content-Type: application/json
Date: REGEX(.*)

{
    "orion": {
        "compile_time": "REGEX(.*)",
        "compiled_by": "REGEX(.*)",
        "compiled_in": "REGEX(.*)",
        "git_hash": "REGEX(([0-9a-f]{40}|nogitversion))",
        "uptime": "REGEX(.*)",
        "version": "REGEX(.*)"
    }
}


03. Error: Send a /version request with one invalid option (canonical)
======================================================================
HTTP/1.1 400 Bad Request
Content-Length: 139
Content-Type: application/json
Date: REGEX(.*)

{
    "orionError": {
        "code": "400",
        "details": "Invalid value for URI param /options/",
        "reasonPhrase": "Bad Request"
    }
}


04. OK: Send a /version request with ALL valid options (count, normalized, values & text)
=========================================================================================
HTTP/1.1 200 OK
Content-Length: REGEX(\d+)
Content-Type: application/json
Date: REGEX(.*)

{
    "orion": {
        "compile_time": "REGEX(.*)",
        "compiled_by": "REGEX(.*)",
        "compiled_in": "REGEX(.*)",
        "git_hash": "REGEX(([0-9a-f]{40}|nogitversion))",
        "uptime": "REGEX(.*)",
        "version": "REGEX(.*)"
    }
}


05. Error: Send a /version request with ALL valid options and ONE invalid
=========================================================================
HTTP/1.1 400 Bad Request
Content-Length: 139
Content-Type: application/json
Date: REGEX(.*)

{
    "orionError": {
        "code": "400",
        "details": "Invalid value for URI param /options/",
        "reasonPhrase": "Bad Request"
    }
}


06. Error: Test an arbitrary API v2 path
========================================
HTTP/1.1 400 Bad Request
Content-Length: 76
Content-Type: application/json
Date: REGEX(.*)

{
    "description": "Invalid value for URI param /options/",
    "error": "BadRequest"
}


--TEARDOWN--
brokerStop CB
dbDrop CB
