# Copyright 2017 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
GET registration using APIv2, created using V1

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--

#
# At the moment of implementing the functionality of issue #3008, there was no way to create
# registrations using APIv2 (Nov/Dec 2017), so, to test this new functionality of querying registrations
# in APIv2, the registrations had to be created using APIv1.
# Now, one might say, so, as soon as APIv2 implements creation of registrations, this test should be changed to
# use APIv2 registration creation instead.
# Sure, but, creating and getting registrations in pure APIv2 will be sufficiently tested in the future.
# I would prefer to keep this tests as is, creation in APIv1 and getting in APIv2, to test the 'API version cross'.
#
# 01. Register entity E1/A1, using APIv1
# 02. GET the registration using APIv2
#

echo "01. Register entity E1/A1, using APIv1"
echo "======================================"
payload='{
  "contextRegistrations": [
  {
    "entities": [
      {
         "id": "E1",
         "isPattern": "false",
         "type": "T1"
      },
      {
         "id": "E2",
         "type": "T2"
      }
    ],
    "attributes": [
      {
        "name": "A1",
        "type": "string",
        "isDomain": "false"
      },
      {
        "name": "A2",
        "type": "string",
        "isDomain": "false"
      }
    ],
    "providingApplication": "http://localhost:'${CP1_PORT}'/v2"
    }
 ],
 "duration": "P1M"
}'
orionCurl --url /v1/registry/registerContext --payload "$payload"
REG_ID=$(echo "$_response" | grep registrationId | awk -F\" '{ print $4}')
echo
echo


echo "02. GET the registration using APIv2"
echo "===================================="
orionCurl --url /v2/registrations/${REG_ID} -X GET
echo
echo


--REGEXPECT--
01. Register entity E1/A1, using APIv1
======================================
HTTP/1.1 200 OK
Content-Length: 74
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "duration": "P1M",
    "registrationId": "REGEX([0-9a-f]{24})"
}


02. GET the registration using APIv2
====================================
HTTP/1.1 200 OK
Content-Length: 301
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "dataProvided": {
        "attrs": [
            "A1",
            "A2"
        ],
        "entities": [
            {
                "id": "E1",
                "type": "T1"
            },
            {
                "id": "E2",
                "type": "T2"
            }
        ]
    },
    "forwardingInformation": {
        "timesSent": 0
    },
    "id": "REGEX([0-9a-f\-]{24})",
    "provider": {
        "http": {
            "url": "http://localhost:9801/v2"
        },
        "legacyForwarding": true,
        "supportedForwardingMode": "all"
    },
    "status": "active"
}


--TEARDOWN--
brokerStop CB
dbDrop CB
