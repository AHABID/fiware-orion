# Copyright 2016 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
failure stats in db and notifications

--SHELL-INIT--
dbInit CB
brokerStart CB 0 IPv4 -subCacheIval 3
accumulatorStart --pretty-print

--SHELL--

#
#
# 01. Create entity E1
# 02. Create sub (with invalid url), matching E1
# 03. GET subscription, see error stats in notification field
# 04. Update sub (with OK url), matching E1
# 05. GET subscription, see error stats in notification field
# 06. Update E1, to provoke notification that now works and error stats should be cleared out
# 07. GET subscription, see NO error stats in notification field
#

echo "01. Create entity E1"
echo "===================="
payload='{
  "id": "E1",
  "type": "T1",
  "A1": 1
}'
orionCurl --url '/v2/entities?options=keyValues' --payload "$payload"
echo
echo


echo "02. Create sub (with invalid url), matching E1"
echo "=============================================="
payload='{
  "subject": {
    "entities": [
      {
        "id": "E1"
      }
    ],
    "condition": {
      "attrs": []
    }
  },
  "notification": {
    "http": {
      "url": "http://nohost:'$LISTENER_PORT'/notify"
    },
    "attrs": [ ]
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
subId=$(echo "$_responseHeaders" | grep Location | awk -F/ '{ print $4 }' | tr -d "\r\n")
echo
echo


echo "03. GET subscription, see error stats in notification field"
echo "==========================================================="
sleep 3
orionCurl --url /v2/subscriptions
echo
echo


--REGEXPECT--
01. Create entity E1
====================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E1?type=T1
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)


02. Create sub (with invalid url), matching E1
==============================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



03. GET subscription, see error stats in notification field
===========================================================
HTTP/1.1 200 OK
Content-Length: 424
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

[
    {
        "id": "REGEX([0-9a-f]{24})",
        "notification": {
            "attrs": [],
            "attrsFormat": "normalized",
            "http": {
                "url": "http://localhost:REGEX(\d+)/notify"
            }
        },
        "status": "active",
        "subject": {
            "condition": {
                "attrs": [
                    "temp"
                ],
                "expression": {
                    "q": "temp==10"
                }
            },
            "entities": [
                {
                    "id": "Room"
                }
            ]
        }
    }
]


--TEARDOWN--
brokerStop CB
dbDrop CB
accumulatorStop
