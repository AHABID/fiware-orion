# Copyright 2013 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Accept header fail

--SHELL-INIT--
dbInit CB
brokerStart CB 38,39

--SHELL--

#
# Note that curl by default uses "Accept: */*" so this step is testing that "no header" is interpreted as
# "Accept: */*" according to HTTP RFC
#
# 01. Invalid 'Accept' HTTP header
# 02. Invalid XML payload
# 03. Explicit 'Accept: application/xml' is ok
# 04. 'Accept-list' with valid mime-type
# 05. 'Accept-list' with valid mime-type AND encoding after ';'
# 06. 'Accept-list' with no valid mime-type and invalid XML payload
# 07. 'Accept-list' with no valid mime-type, invalid XML payload, and extra encoding after ';'
# 08. Verify that an explicit 'Accept: application/json' is ok
# 09. Accept preference is correctly taken into account (XML preferred to JSON), order is JSON, XML
# 10. Accept preference is correctly taken into account (XML preferred to JSON), order is XML, JSON
# 11. Cross Accept/Content-Type XML/JSON test (only a weird client will do this, but it is theoretically possible)
# 12. Cross Accept/Content-Type JSON/XML test (only a weird client will do this, but it is theoretically possible)
# 
#


echo "01. Invalid 'Accept' HTTP header"
echo "================================"
payload='<?xml version="1.0"?>
<queryContextRequest>
  <entityIdList>
    <entityId type="Room" isPattern="false">
      <id>OfficeRoom</id>
    </entityId>
  </entityIdList>
  <attributeList/>
</queryContextRequest>'
orionCurl --url /v1/queryContext --payload "${payload}" --out " "
echo
echo


echo "02. Invalid XML payload"
echo "======================="
payload='no meaningful payload (failing tests)'
orionCurl --url /v1/queryContext --payload "${payload}"
echo
echo


echo "03. Explicit 'Accept: application/xml' is ok"
echo "============================================"
payload='<?xml version="1.0" encoding="UTF-8"?>
<queryContextRequest>
  <entityIdList>
    <entityId type="Room" isPattern="false">
      <id>OfficeRoom</id>
    </entityId>
  </entityIdList>
  <attributeList/>
</queryContextRequest>'
orionCurl --url /v1/queryContext --payload "${payload}" --out "application/xml"
echo
echo


echo "04. 'Accept-list' with valid mime-type"
echo "======================================"
payload='<?xml version="1.0" encoding="UTF-8"?>
<queryContextRequest>
  <entityIdList>
    <entityId type="Room" isPattern="false">
      <id>OfficeRoom</id>
    </entityId>
  </entityIdList>
  <attributeList/>
</queryContextRequest>'
orionCurl --url /v1/queryContext --payload "${payload}" --out "text/plain, application/xml"
echo
echo


echo "05. 'Accept-list' with valid mime-type AND encoding after ';'"
echo "============================================================="
payload='<?xml version="1.0" encoding="UTF-8"?>
<queryContextRequest>
  <entityIdList>
    <entityId type="Room" isPattern="false">
      <id>OfficeRoom</id>
    </entityId>
  </entityIdList>
  <attributeList/>
</queryContextRequest>'
orionCurl --url /v1/queryContext --payload "${payload}" --out "text/plain, application/xml; charset=UTF-8"
echo
echo


echo "06. 'Accept-list' with no valid mime-type and invalid XML payload"
echo "================================================================="
payload='no meaningful payload (failing tests)'
orionCurl --url /v1/queryContext --payload "${payload}" --out "text/plane, image/jpeg"
echo
echo


echo "07. 'Accept-list' with no valid mime-type, invalid XML payload, and extra encoding after ';'"
echo "============================================================================================"
payload='no meaningful payload (failing tests)'
orionCurl --url /v1/queryContext --payload "${payload}" --out "text/plane, image/jpeg; charset=UTF-8"
echo
echo


echo "08. Verify that an explicit 'Accept: application/json' is ok"
echo "============================================================"
payload='{
	"entities": [
		{
			"type": "Room",
			"isPattern": "false",
			"id": "OfficeRoom"
		}
	]
}'
orionCurl --url /v1/queryContext --payload "${payload}" --in "application/json" --out "application/json"
echo
echo


echo "09. Accept preference is correctly taken into account (XML preferred to JSON), order is JSON, XML"
echo "================================================================================================="
payload='{
  "entities": [
    {
      "type": "Room",
      "isPattern": "false",
      "id": "OfficeRoom"
    }
  ]
}'
orionCurl --url /v1/queryContext --payload "${payload}" --in "application/json" --out "application/json, application/xml"
echo
echo


echo "10. Accept preference is correctly taken into account (XML preferred to JSON), order is XML, JSON"
echo "================================================================================================="
payload='<?xml version="1.0" encoding="UTF-8"?>
<queryContextRequest>
  <entityIdList>
    <entityId type="Room" isPattern="false">
      <id>OfficeRoom</id>
    </entityId>
  </entityIdList>
</queryContextRequest>'
orionCurl --url /v1/queryContext --payload "${payload}" --in "application/xml" --out "application/xml, application/json"
echo
echo


# FIXME P6: Once issue #317 is fixed - make this test use orionCurl
echo "11. Cross Accept/Content-Type XML/JSON test (only a weird client will do this, but it is theoretically possible)"
echo "================================================================================================================"
(curl localhost:${CB_PORT}/v1/queryContext -s -S --header 'Content-Type: application/json' --header 'Accept: application/xml' -d @- | xmllint --format -) << EOF
{
  "entities": [
    {
      "type": "Room",
      "isPattern": "false",
      "id": "OfficeRoom"
    }
  ]
}
EOF
echo
echo


# FIXME P6: Once issue #317 is fixed - make this test use orionCurl
echo "12. Cross Accept/Content-Type JSON/XML test (only a weird client will do this, but it is theoretically possible)"
echo "================================================================================================================"
(curl localhost:${CB_PORT}/v1/queryContext -s -S --header 'Content-Type: application/xml' --header 'Accept: application/json' -d @-) <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<queryContextRequest>
  <entityIdList>
    <entityId type="Room" isPattern="false">
      <id>OfficeRoom</id>
    </entityId>
  </entityIdList>
</queryContextRequest>
EOF
echo
echo


--REGEXPECT--
01. Invalid 'Accept' HTTP header
================================
HTTP/1.1 200 OK
Content-Length: 155
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</queryContextResponse>


02. Invalid XML payload
=======================
HTTP/1.1 200 OK
Content-Length: 126
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<orionError>
  <code>400</code>
  <reasonPhrase>Bad Request</reasonPhrase>
  <details>XML Parse Error</details>
</orionError>


03. Explicit 'Accept: application/xml' is ok
============================================
HTTP/1.1 200 OK
Content-Length: 155
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</queryContextResponse>


04. 'Accept-list' with valid mime-type
======================================
HTTP/1.1 200 OK
Content-Length: 155
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</queryContextResponse>


05. 'Accept-list' with valid mime-type AND encoding after ';'
=============================================================
HTTP/1.1 200 OK
Content-Length: 155
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</queryContextResponse>


06. 'Accept-list' with no valid mime-type and invalid XML payload
=================================================================
HTTP/1.1 406 Not Acceptable
Content-Length: 220
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<orionError>
  <code>406</code>
  <reasonPhrase>Not Acceptable</reasonPhrase>
  <details>acceptable MIME types: application/xml, application/json. Accept header in request: text/plane, image/jpeg</details>
</orionError>


07. 'Accept-list' with no valid mime-type, invalid XML payload, and extra encoding after ';'
============================================================================================
HTTP/1.1 406 Not Acceptable
Content-Length: 243
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<orionError>
  <code>406</code>
  <reasonPhrase>Not Acceptable</reasonPhrase>
  <details>acceptable MIME types: application/xml, application/json. Accept header in request: text/plane, image/jpeg; charset=UTF-8</details>
</orionError>


08. Verify that an explicit 'Accept: application/json' is ok
============================================================
HTTP/1.1 200 OK
Content-Length: 94
Content-Type: application/json
Date: REGEX(.*)

{
    "errorCode": {
        "code": "404",
        "reasonPhrase": "No context element found"
    }
}


09. Accept preference is correctly taken into account (XML preferred to JSON), order is JSON, XML
=================================================================================================
HTTP/1.1 200 OK
Content-Length: 155
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</queryContextResponse>


10. Accept preference is correctly taken into account (XML preferred to JSON), order is XML, JSON
=================================================================================================
HTTP/1.1 200 OK
Content-Length: 155
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</queryContextResponse>


11. Cross Accept/Content-Type XML/JSON test (only a weird client will do this, but it is theoretically possible)
================================================================================================================
<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</queryContextResponse>


12. Cross Accept/Content-Type JSON/XML test (only a weird client will do this, but it is theoretically possible)
================================================================================================================
{
  "errorCode" : {
    "code" : "404",
    "reasonPhrase" : "No context element found"
  }
}


--TEARDOWN--
brokerStop CB
dbDrop CB
