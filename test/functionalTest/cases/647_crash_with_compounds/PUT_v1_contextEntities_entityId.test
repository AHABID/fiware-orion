# Copyright 2014 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# fermin at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Attribute Compound Value parsing for PUT /v1/contextEntities/entityId (updateContextElementRequest)
--SHELL-INIT--

dbInit CB
brokerStart CB

--SHELL--

#
# Just one request needed here to make dure the broker doesn't crash when receiving
# a compound attribute value for "PUT /v1/contextEntities/entityId":
#
# 01. PUT /v1/contextEntities/entityId with compound attribute value using JSON
# 02. PUT /v1/contextEntities/entityId with compound attribute value using XML
#


echo "01. PUT /v1/contextEntities/entityId with compound attribute value using JSON"
payload='{
  "attributes": [
    {
        "name": "sdf",
        "type": "",
        "value": {"a": 1}
    }
  ]
}'
orionCurl --url /v1/contextEntities/entityId -X PUT --payload "$payload" --json
echo
echo


echo "02. PUT /v1/contextEntities/entityId with compound attribute value using XML"
payload='<?xml version="1.0" encoding="UTF-8"?>
<updateContextElementRequest>
  <contextAttributeList>
    <contextAttribute>
      <name>sdf</name>
      <type></type>
      <contextValue>
        <a>1</a>
      </contextValue>
    </contextAttribute>
  </contextAttributeList>
</updateContextElementRequest>'
orionCurl --url /v1/contextEntities/entityId -X PUT --payload "$payload"
echo
echo


--REGEXPECT--
01. PUT /v1/contextEntities/entityId with compound attribute value using JSON
HTTP/1.1 200 OK
Content-Length: 122
Content-Type: application/json
Date: REGEX(.*)

{
    "errorCode": {
        "code": "404", 
        "details": "entityId", 
        "reasonPhrase": "No context element found"
    }
}


02. PUT /v1/contextEntities/entityId with compound attribute value using XML
HTTP/1.1 200 OK
Content-Length: 133
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<orionError>
  <code>400</code>
  <reasonPhrase>Bad Request</reasonPhrase>
  <details>Unknown XML field: 'a'</details>
</orionError>


--TEARDOWN--
brokerStop CB
dbInit CB
