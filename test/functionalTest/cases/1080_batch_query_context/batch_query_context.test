# Copyright 2016 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
V2 batch query

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--

#
# 01. Create an entity E of type T, with attributes A1=11,A4=14,A5=15
# 02. Create an entity E of type T2, with attributes A2=22,A5=25
# 03. Create an entity E3 of type T, with attributes A3=33,A4=34,A5=35
#
# 04. POST /v2/op/query, with empty payload, see error
# 05. POST /v2/op/query, with non-empty payload but without any of the three optional vector fields, see error
# 06. POST /v2/op/query, with 'entities' as an object, see error
#
# 07. POST /v2/op/query, with only E in payload, see 2 entities
# 08. POST /v2/op/query, with only E3 in payload, see 1 entity
# 09. POST /v2/op/query, with E and E3 in payload, see 3 entities
# 10. POST /v2/op/query, with E.* in payload, see 3 entities
# 11. POST /v2/op/query, with E3.* in payload, see 1 entity
# 12. POST /v2/op/query, with F.* in payload, see no entities
#
# 13. POST /v2/op/query, with E.* and 'attributes' as an object, not an array - see error
# 14. POST /v2/op/query, with E.* and 'attributes' as an array of integers, not strings - see error
#
# 15. POST /v2/op/query, with only A5 in payload, see 3 entities
# 16. POST /v2/op/query, with E.* and A1 in payload, see 1 entity
# 17. POST /v2/op/query, with E.* and A5 in payload, see 3 entities
# 18. POST /v2/op/query, with E.* and A1,A2 in payload, see 2 entities
#
# 19. POST /v2/op/query, with 'scopes' as an object, not an array - see error
# 20. POST /v2/op/query, with a scope being a vector, not an object - see error
# 21. POST /v2/op/query, with a scope without 'type' - see error
# 22. POST /v2/op/query, with a scope without 'value' - see error
# 23. POST /v2/op/query, with a scope with an unknown field (not 'value' nor 'type') - see error
# 24. POST /v2/op/query, with a scope whose 'type' is not a String - see error
# 25. POST /v2/op/query, with a scope whose 'value' is not a String - see error
#
# 26. POST /v2/op/query, with E.* and in a scope q:A1==11, see E/T
# 27. POST /v2/op/query, with E.* and in a scope q:type, see all 3 entities
# 28. POST /v2/op/query, with E.* and in a scope q:!type, see NO entities
# 29. Create an entity E5 without type, with attribute A5=45
# 30. Create an entity E5 of type T4, with attribute A5=45
# 31. POST /v2/op/query, with E.*, and with scopes q:type and q=A5==45, see E5/T4 only
# 32. POST /v2/op/query, with E.* with scopes q:!type and q=A5==45, see E5/<notype> only
#


echo "01. Create an entity E of type T, with attributes A1=11,A4=14,A5=15"
echo "==================================================================="
payload='{
  "id": "E",
  "type": "T",
  "A1": 11,
  "A4": 14,
  "A5": 15
}'
orionCurl --url /v2/entities?options=keyValues --payload "$payload" --json
echo
echo


echo "02. Create an entity E of type T2, with attributes A2=22,A5=25"
echo "=============================================================="
payload='{
  "id": "E",
  "type": "T2",
  "A2": 22,
  "A5": 25
}'
orionCurl --url /v2/entities?options=keyValues --payload "$payload" --json
echo
echo


echo "03. Create an entity E3 of type T, with attributes A3=33,A4=34,A5=35"
echo "===================================================================="
payload='{
  "id": "E3",
  "type": "T",
  "A3": 33,
  "A4": 34,
  "A5": 35
}'
orionCurl --url /v2/entities?options=keyValues --payload "$payload" --json
echo
echo


echo "04. POST /v2/op/query, with empty payload, see error"
echo "===================================================="
payload='{}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo


echo "05. POST /v2/op/query, with non-empty payload but without any of the three optional vector fields, see error"
echo "============================================================================================================"
payload='{
  "nonSupported_field": [
    {
      "id": "E"
    }
  ]
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo


echo "06. POST /v2/op/query, with 'entities' as an object, see error"
echo "=============================================================="
payload='{
  "entities": {
      "id": "E"
  }
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo


echo "07. POST /v2/op/query, with only E in payload, see 2 entities"
echo "============================================================="
payload='{
  "entities": [
    {
      "id": "E"
    }
  ]
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo


echo "08. POST /v2/op/query, with only E3 in payload, see 1 entity"
echo "============================================================"
payload='{
  "entities": [
    {
      "id": "E3"
    }
  ]
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo


echo "09. POST /v2/op/query, with E and E3 in payload, see 3 entities"
echo "==============================================================="
payload='{
  "entities": [
    {
      "id": "E"
    },
    {
      "id": "E3"
    }
  ]
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo


echo "10. POST /v2/op/query, with E.* in payload, see 3 entities"
echo "=========================================================="
payload='{
  "entities": [
    {
      "idPattern": "E.*"
    }
  ]
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo


echo "11. POST /v2/op/query, with E3.* in payload, see 1 entity"
echo "========================================================="
payload='{
  "entities": [
    {
      "idPattern": "E3.*"
    }
  ]
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo


echo "12. POST /v2/op/query, with F.* in payload, see no entities"
echo "==========================================================="
payload='{
  "entities": [
    {
      "idPattern": "F.*"
    }
  ]
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo


echo "13. POST /v2/op/query, with E.* and 'attributes' as an object, not an array - see error"
echo "======================================================================================="
payload='{
  "attributes": {
    "A1": 0
  }
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo


echo "14. POST /v2/op/query, with E.* and 'attributes' as an array of integers, not strings - see error"
echo "================================================================================================="
payload='{
  "attributes": [
    1, 2, 3
  ]
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo


echo "15. POST /v2/op/query, with only A5 in payload, see 3 entities"
echo "=============================================================="
payload='{
  "attributes": [
    "A5"
  ]
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo


echo "16. POST /v2/op/query, with E.* and A1 in payload, see 1 entity"
echo "==============================================================="
payload='{
  "entities": [
    {
      "idPattern": "E.*"
    }
  ],
  "attributes": [
    "A1"
  ]
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo


echo "17. POST /v2/op/query, with E.* and A5 in payload, see 3 entities"
echo "================================================================="
payload='{
  "entities": [
    {
      "idPattern": "E.*"
    }
  ],
  "attributes": [
    "A5"
  ]
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo


echo "18. POST /v2/op/query, with E.* and A1,A2 in payload, see 2 entities"
echo "===================================================================="
payload='{
  "entities": [
    {
      "idPattern": "E.*"
    }
  ],
  "attributes": [
    "A1",
    "A2"
  ]
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo


echo "19. POST /v2/op/query, with 'scopes' as an object, not an array - see error"
echo "==========================================================================="
payload='{
  "scopes": {
    "invalid": "scopes must be a vector"
  }
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo


echo "20. POST /v2/op/query, with a scope being a vector, not an object - see error"
echo "============================================================================="
payload='{
  "scopes": [
    [ 1,2,3 ]
  ]
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo


echo "21. POST /v2/op/query, with a scope without 'type' - see error"
echo "=============================================================="
payload='{
  "scopes": [
    {
      "value": "scope-value"
    }
  ]
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo


echo "22. POST /v2/op/query, with a scope without 'value' - see error"
echo "==============================================================="
payload='{
  "scopes": [
    {
      "type": "scope-type"
    }
  ]
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo


echo "23. POST /v2/op/query, with a scope with an unknown field (not 'value' nor 'type') - see error"
echo "=============================================================================================="
payload='{
  "scopes": [
    {
      "type": "scope-type",
      "value": "scope-value",
      "unknown": "error"
    }
  ]
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo


echo "24. POST /v2/op/query, with a scope whose 'type' is not a String - see error"
echo "============================================================================"
payload='{
  "scopes": [
    {
      "type": 24,
      "value": "scope-value"
    }
  ]
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo


echo "25. POST /v2/op/query, with a scope whose 'value' is not a String - see error"
echo "============================================================================="
payload='{
  "scopes": [
    {
      "type": "scope-type",
      "value": 25
    }
  ]
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo


echo "26. POST /v2/op/query, with E.* and in a scope q:A1==11, see E/T"
echo "================================================================"
payload='{
  "scopes": [
    {
      "type": "FIWARE::StringQuery",
      "value": "A1==11"
    }
  ]
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo



echo "27. POST /v2/op/query, with E.* and in a scope q:type, see all 3 entities"
echo "========================================================================="
payload='{
  "scopes": [
    {
      "type": "FIWARE::StringQuery",
      "value": "type"
    }
  ]
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo


echo "28. POST /v2/op/query, with E.* and in a scope q:!type, see NO entities"
echo "======================================================================="
payload='{
  "scopes": [
    {
      "type": "FIWARE::StringQuery",
      "value": "!type"
    }
  ]
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo


echo "29. Create an entity E5 without type, with attribute A5=45"
echo "=========================================================="
payload='{
  "id": "E5",
  "A5": 45
}'
orionCurl --url /v2/entities?options=keyValues --payload "$payload" --json
echo
echo


echo "30. Create an entity E5 of type T4, with attribute A5=45"
echo "========================================================"
payload='{
  "id": "E5",
  "type": "T4",
  "A5": 45
}'
orionCurl --url /v2/entities?options=keyValues --payload "$payload" --json
echo
echo


echo "31. POST /v2/op/query, with E.*, and with scopes q:type and q=A5==45, see E5/T4 only"
echo "===================================================================================="
payload='{
  "entities": [
    {
      "idPattern": "E.*"
    }
  ],
  "scopes": [
    {
      "type": "FIWARE::StringQuery",
      "value": "type"
    },
    {
      "type": "FIWARE::StringQuery",
      "value": "A5==45"
    }
  ]
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo


echo "32. POST /v2/op/query, with E.* with scopes q:!type and q=A5==45, see E5/<notype> only"
echo "======================================================================================"
payload='{
  "entities": [
    {
      "idPattern": "E.*"
    }
  ],
  "scopes": [
    {
      "type": "FIWARE::StringQuery",
      "value": "!type"
    },
    {
      "type": "FIWARE::StringQuery",
      "value": "A5==45"
    }
  ]
}'
orionCurl --url /v2/op/query --payload "$payload" --json
echo
echo



--REGEXPECT--
01. Create an entity E of type T, with attributes A1=11,A4=14,A5=15
===================================================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E
Date: REGEX(.*)



02. Create an entity E of type T2, with attributes A2=22,A5=25
==============================================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E
Date: REGEX(.*)



03. Create an entity E3 of type T, with attributes A3=33,A4=34,A5=35
====================================================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E3
Date: REGEX(.*)



04. POST /v2/op/query, with empty payload, see error
====================================================
HTTP/1.1 400 Bad Request
Content-Length: 52
Content-Type: application/json
Date: REGEX(.*)

{
    "description": "empty payload",
    "error": "BadRequest"
}


05. POST /v2/op/query, with non-empty payload but without any of the three optional vector fields, see error
============================================================================================================
HTTP/1.1 400 Bad Request
Content-Length: 85
Content-Type: application/json
Date: REGEX(.*)

{
    "description": "Invalid JSON payload, no relevant fields found",
    "error": "BadRequest"
}


06. POST /v2/op/query, with 'entities' as an object, see error
==============================================================
HTTP/1.1 400 Bad Request
Content-Length: 55
Content-Type: application/json
Date: REGEX(.*)

{
    "description": "not a JSON array",
    "error": "BadRequest"
}


07. POST /v2/op/query, with only E in payload, see 2 entities
=============================================================
HTTP/1.1 200 OK
Content-Length: 301
Content-Type: application/json
Date: REGEX(.*)

[
    {
        "A1": {
            "metadata": {},
            "type": null,
            "value": 11.0
        },
        "A4": {
            "metadata": {},
            "type": null,
            "value": 14.0
        },
        "A5": {
            "metadata": {},
            "type": null,
            "value": 15.0
        },
        "id": "E",
        "type": "T"
    },
    {
        "A2": {
            "metadata": {},
            "type": null,
            "value": 22.0
        },
        "A5": {
            "metadata": {},
            "type": null,
            "value": 25.0
        },
        "id": "E",
        "type": "T2"
    }
]


08. POST /v2/op/query, with only E3 in payload, see 1 entity
============================================================
HTTP/1.1 200 OK
Content-Length: 177
Content-Type: application/json
Date: REGEX(.*)

[
    {
        "A3": {
            "metadata": {},
            "type": null,
            "value": 33.0
        },
        "A4": {
            "metadata": {},
            "type": null,
            "value": 34.0
        },
        "A5": {
            "metadata": {},
            "type": null,
            "value": 35.0
        },
        "id": "E3",
        "type": "T"
    }
]


09. POST /v2/op/query, with E and E3 in payload, see 3 entities
===============================================================
HTTP/1.1 200 OK
Content-Length: 477
Content-Type: application/json
Date: REGEX(.*)

[
    {
        "A1": {
            "metadata": {},
            "type": null,
            "value": 11.0
        },
        "A4": {
            "metadata": {},
            "type": null,
            "value": 14.0
        },
        "A5": {
            "metadata": {},
            "type": null,
            "value": 15.0
        },
        "id": "E",
        "type": "T"
    },
    {
        "A2": {
            "metadata": {},
            "type": null,
            "value": 22.0
        },
        "A5": {
            "metadata": {},
            "type": null,
            "value": 25.0
        },
        "id": "E",
        "type": "T2"
    },
    {
        "A3": {
            "metadata": {},
            "type": null,
            "value": 33.0
        },
        "A4": {
            "metadata": {},
            "type": null,
            "value": 34.0
        },
        "A5": {
            "metadata": {},
            "type": null,
            "value": 35.0
        },
        "id": "E3",
        "type": "T"
    }
]


10. POST /v2/op/query, with E.* in payload, see 3 entities
==========================================================
HTTP/1.1 200 OK
Content-Length: 477
Content-Type: application/json
Date: REGEX(.*)

[
    {
        "A1": {
            "metadata": {},
            "type": null,
            "value": 11.0
        },
        "A4": {
            "metadata": {},
            "type": null,
            "value": 14.0
        },
        "A5": {
            "metadata": {},
            "type": null,
            "value": 15.0
        },
        "id": "E",
        "type": "T"
    },
    {
        "A2": {
            "metadata": {},
            "type": null,
            "value": 22.0
        },
        "A5": {
            "metadata": {},
            "type": null,
            "value": 25.0
        },
        "id": "E",
        "type": "T2"
    },
    {
        "A3": {
            "metadata": {},
            "type": null,
            "value": 33.0
        },
        "A4": {
            "metadata": {},
            "type": null,
            "value": 34.0
        },
        "A5": {
            "metadata": {},
            "type": null,
            "value": 35.0
        },
        "id": "E3",
        "type": "T"
    }
]


11. POST /v2/op/query, with E3.* in payload, see 1 entity
=========================================================
HTTP/1.1 200 OK
Content-Length: 177
Content-Type: application/json
Date: REGEX(.*)

[
    {
        "A3": {
            "metadata": {},
            "type": null,
            "value": 33.0
        },
        "A4": {
            "metadata": {},
            "type": null,
            "value": 34.0
        },
        "A5": {
            "metadata": {},
            "type": null,
            "value": 35.0
        },
        "id": "E3",
        "type": "T"
    }
]


12. POST /v2/op/query, with F.* in payload, see no entities
===========================================================
HTTP/1.1 200 OK
Content-Length: 2
Content-Type: application/json
Date: REGEX(.*)

[]


13. POST /v2/op/query, with E.* and 'attributes' as an object, not an array - see error
=======================================================================================
HTTP/1.1 400 Bad Request
Content-Length: 82
Content-Type: application/json
Date: REGEX(.*)

{
    "description": "the field /attributes/ must be a JSON array",
    "error": "BadRequest"
}


14. POST /v2/op/query, with E.* and 'attributes' as an array of integers, not strings - see error
=================================================================================================
HTTP/1.1 400 Bad Request
Content-Length: 82
Content-Type: application/json
Date: REGEX(.*)

{
    "description": "only JSON Strings allowed in attribute list",
    "error": "BadRequest"
}


15. POST /v2/op/query, with only A5 in payload, see 3 entities
==============================================================
HTTP/1.1 200 OK
Content-Length: 222
Content-Type: application/json
Date: REGEX(.*)

[
    {
        "A5": {
            "metadata": {},
            "type": null,
            "value": 15.0
        },
        "id": "E",
        "type": "T"
    },
    {
        "A5": {
            "metadata": {},
            "type": null,
            "value": 25.0
        },
        "id": "E",
        "type": "T2"
    },
    {
        "A5": {
            "metadata": {},
            "type": null,
            "value": 35.0
        },
        "id": "E3",
        "type": "T"
    }
]


16. POST /v2/op/query, with E.* and A1 in payload, see 1 entity
===============================================================
HTTP/1.1 200 OK
Content-Length: 74
Content-Type: application/json
Date: REGEX(.*)

[
    {
        "A1": {
            "metadata": {},
            "type": null,
            "value": 11.0
        },
        "id": "E",
        "type": "T"
    }
]


17. POST /v2/op/query, with E.* and A5 in payload, see 3 entities
=================================================================
HTTP/1.1 200 OK
Content-Length: 222
Content-Type: application/json
Date: REGEX(.*)

[
    {
        "A5": {
            "metadata": {},
            "type": null,
            "value": 15.0
        },
        "id": "E",
        "type": "T"
    },
    {
        "A5": {
            "metadata": {},
            "type": null,
            "value": 25.0
        },
        "id": "E",
        "type": "T2"
    },
    {
        "A5": {
            "metadata": {},
            "type": null,
            "value": 35.0
        },
        "id": "E3",
        "type": "T"
    }
]


18. POST /v2/op/query, with E.* and A1,A2 in payload, see 2 entities
====================================================================
HTTP/1.1 200 OK
Content-Length: 148
Content-Type: application/json
Date: REGEX(.*)

[
    {
        "A1": {
            "metadata": {},
            "type": null,
            "value": 11.0
        },
        "id": "E",
        "type": "T"
    },
    {
        "A2": {
            "metadata": {},
            "type": null,
            "value": 22.0
        },
        "id": "E",
        "type": "T2"
    }
]


19. POST /v2/op/query, with 'scopes' as an object, not an array - see error
===========================================================================
HTTP/1.1 400 Bad Request
Content-Length: 78
Content-Type: application/json
Date: REGEX(.*)

{
    "description": "the field /scopes/ must be a JSON array",
    "error": "BadRequest"
}


20. POST /v2/op/query, with a scope being a vector, not an object - see error
=============================================================================
HTTP/1.1 400 Bad Request
Content-Length: 65
Content-Type: application/json
Date: REGEX(.*)

{
    "description": "scope is not a JSON object",
    "error": "BadRequest"
}


21. POST /v2/op/query, with a scope without 'type' - see error
==============================================================
HTTP/1.1 400 Bad Request
Content-Length: 59
Content-Type: application/json
Date: REGEX(.*)

{
    "description": "scope without a type",
    "error": "BadRequest"
}


22. POST /v2/op/query, with a scope without 'value' - see error
===============================================================
HTTP/1.1 400 Bad Request
Content-Length: 60
Content-Type: application/json
Date: REGEX(.*)

{
    "description": "scope without a value",
    "error": "BadRequest"
}


23. POST /v2/op/query, with a scope with an unknown field (not 'value' nor 'type') - see error
==============================================================================================
HTTP/1.1 400 Bad Request
Content-Length: 83
Content-Type: application/json
Date: REGEX(.*)

{
    "description": "unrecognized item in scope object: /unknown/",
    "error": "BadRequest"
}


24. POST /v2/op/query, with a scope whose 'type' is not a String - see error
============================================================================
HTTP/1.1 400 Bad Request
Content-Length: 71
Content-Type: application/json
Date: REGEX(.*)

{
    "description": "invalid JSON type for scope type",
    "error": "BadRequest"
}


25. POST /v2/op/query, with a scope whose 'value' is not a String - see error
=============================================================================
HTTP/1.1 400 Bad Request
Content-Length: 72
Content-Type: application/json
Date: REGEX(.*)

{
    "description": "invalid JSON type for scope value",
    "error": "BadRequest"
}


26. POST /v2/op/query, with E.* and in a scope q:A1==11, see E/T
================================================================
HTTP/1.1 200 OK
Content-Length: 176
Content-Type: application/json
Date: REGEX(.*)

[
    {
        "A1": {
            "metadata": {},
            "type": null,
            "value": 11.0
        },
        "A4": {
            "metadata": {},
            "type": null,
            "value": 14.0
        },
        "A5": {
            "metadata": {},
            "type": null,
            "value": 15.0
        },
        "id": "E",
        "type": "T"
    }
]


27. POST /v2/op/query, with E.* and in a scope q:type, see all 3 entities
=========================================================================
HTTP/1.1 200 OK
Content-Length: 477
Content-Type: application/json
Date: REGEX(.*)

[
    {
        "A1": {
            "metadata": {},
            "type": null,
            "value": 11.0
        },
        "A4": {
            "metadata": {},
            "type": null,
            "value": 14.0
        },
        "A5": {
            "metadata": {},
            "type": null,
            "value": 15.0
        },
        "id": "E",
        "type": "T"
    },
    {
        "A2": {
            "metadata": {},
            "type": null,
            "value": 22.0
        },
        "A5": {
            "metadata": {},
            "type": null,
            "value": 25.0
        },
        "id": "E",
        "type": "T2"
    },
    {
        "A3": {
            "metadata": {},
            "type": null,
            "value": 33.0
        },
        "A4": {
            "metadata": {},
            "type": null,
            "value": 34.0
        },
        "A5": {
            "metadata": {},
            "type": null,
            "value": 35.0
        },
        "id": "E3",
        "type": "T"
    }
]


28. POST /v2/op/query, with E.* and in a scope q:!type, see NO entities
=======================================================================
HTTP/1.1 200 OK
Content-Length: 2
Content-Type: application/json
Date: REGEX(.*)

[]


29. Create an entity E5 without type, with attribute A5=45
==========================================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E5
Date: REGEX(.*)



30. Create an entity E5 of type T4, with attribute A5=45
========================================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E5
Date: REGEX(.*)



31. POST /v2/op/query, with E.*, and with scopes q:type and q=A5==45, see E5/T4 only
====================================================================================
HTTP/1.1 200 OK
Content-Length: 76
Content-Type: application/json
Date: REGEX(.*)

[
    {
        "A5": {
            "metadata": {},
            "type": null,
            "value": 45.0
        },
        "id": "E5",
        "type": "T4"
    }
]


32. POST /v2/op/query, with E.* with scopes q:!type and q=A5==45, see E5/<notype> only
======================================================================================
HTTP/1.1 200 OK
Content-Length: 76
Content-Type: application/json
Date: REGEX(.*)

[
    {
        "A5": {
            "metadata": {},
            "type": null,
            "value": 45.0
        },
        "id": "E5",
        "type": null
    }
]


--TEARDOWN--
brokerStop CB
dbDrop CB
