# Copyright 2013 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# fermin at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Convenience NGSI9 Context Entity Type Attribute Container
--SHELL-INIT--
# Test to see if we have a broker running on ${BROKER_PORT} if so kill it!
running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
if [ $running_broker -ne 0 ]; then
  kill $(ps -fe | grep contextBroker | grep ${BROKER_PORT} | awk '{print $2}')
  # Wait some time so the broker can finish properly
  sleep 1
  running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
  if [ $running_broker -ne 0 ]; then
    # If the broker refuses to stop politely, kill the process by brute force
    kill -9 $(ps -fe | grep contextBroker | grep ${BROKER_PORT} | awk '{print $2}')
    sleep 1
    running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
    if [ $running_broker -ne 0 ]; then
      echo "Existing contextBroker is inmortal, can not be killed!"
      exit 1
    fi
  fi
fi

echo 'db.dropDatabase()' | mongo ${BROKER_DATABASE_NAME} --quiet
CB_START_CMD="contextBroker -harakiri -port ${BROKER_PORT} -pidpath ${BROKER_PID_FILE} -db ${BROKER_DATABASE_NAME} -t 255"
if [ "$VALGRIND" == "" ]; then
  $CB_START_CMD
  # Wait some time so that the contextBroker is able to do its initial steps (reset database, start HTTP server, etc.)
  sleep 1
else
  valgrind $CB_START_CMD > ${TEST_BASENAME}.valgrind.out 2>&1 &
  # Waiting for valgrind to start (sleep 10)
  sleep 10s
fi

# Test to see if we have a broker running on ${BROKER_PORT} if not raise an error
running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
if [ $running_broker -ne 1 ]; then
  echo "Unable to start contextBroker"
  exit 1
fi

--SHELL--

echo "0: ++++++++++++++++++++"
response=$(curl localhost:${BROKER_PORT}/NGSI9/contextEntityTypes/Room/attributes/temperature -s -S --header 'Content-Type: application/xml' --header 'Accept: application/xml' --dump-header headers.out | xmllint --format - )
cat headers.out
echo $response | xmllint --format -

echo "1: ++++++++++++++++++++"
response=$((curl localhost:${BROKER_PORT}/NGSI9/registerContext -s -S --header 'Content-Type: application/xml' --header 'Accept: application/xml' --header 'Expect:' --dump-header headers.out -X POST -d @- | xmllint --format - ) << EOF
<?xml version="1.0"?>
  <registerContextRequest>
    <contextRegistrationList>
      <contextRegistration>
        <entityIdList>
          <entityId type="Room" isPattern="false">
            <id>ConferenceRoom</id>
          </entityId>
          <entityId type="Room" isPattern="false">
            <id>OfficeRoom</id>
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>temperature</name>
            <type>degree</type>
            <isDomain>false</isDomain>
          </contextRegistrationAttribute>
          <contextRegistrationAttribute>
            <name>pressure</name>
            <type>bar</type>
            <isDomain>false</isDomain>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <providingApplication>http://localhost:1028/application</providingApplication>
      </contextRegistration>
    </contextRegistrationList>
    <duration>PT1H</duration>
    <registrationId></registrationId>
  </registerContextRequest>
EOF)
cat headers.out
echo $response | xmllint --format -

echo "2: ++++++++++++++++++++"
response=$(curl localhost:${BROKER_PORT}/NGSI9/contextEntityTypes/Room/attributes/temperature -s -S --header 'Content-Type: application/xml' --header 'Accept: application/xml' --dump-header headers.out)
cat headers.out
echo $response | xmllint --format -

# DELETE is not allowed
echo "3: ++++++++++++++++++++"
curl localhost:${BROKER_PORT}/NGSI9/contextEntityTypes/Room/attributes/temperature -s -S -X DELETE --include --header 'Content-Type: application/xml' --header 'Accept: application/xml'

# PUT is not allowed
echo "4: ++++++++++++++++++++"
(curl localhost:${BROKER_PORT}/NGSI9/contextEntityTypes/Room/attributes/temperature -s -S -X PUT  --include --header 'Content-Type: application/xml' --header 'Accept: application/xml' -d @-) << EOF
<registerProviderRequest>
  <metadata>
    <contextMetadata>
      <name>ID</name>
      <type>string</type>
      <value>1110</value>
    </contextMetadata>
    <contextMetadata>
      <name>cm2</name>
      <type>string</type>
      <value>XXX</value>
    </contextMetadata>
  </metadata>
  <duration>PT1H</duration>
  <providingApplication>http://kz.tid.es/abc</providingApplication>
</registerProviderRequest>
EOF

echo 5: ++++++++++++++++++++
killall contextBroker
--REGEXPECT--
0: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 185
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<discoverContextAvailabilityResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</discoverContextAvailabilityResponse>
1: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 141
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<registerContextResponse>
  <duration>PT1H</duration>
  <registrationId>REGEX([0-9a-f]{24})</registrationId>
</registerContextResponse>
2: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 902
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<discoverContextAvailabilityResponse>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="Room" isPattern="false">
            <id>ConferenceRoom</id>
          </entityId>
          <entityId type="Room" isPattern="false">
            <id>OfficeRoom</id>
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>temperature</name>
            <type>degree</type>
            <isDomain>false</isDomain>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <providingApplication>http://localhost:1028/application</providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</discoverContextAvailabilityResponse>
3: ++++++++++++++++++++
HTTP/1.1 405 Method Not Allowed
Content-Length: 0
Allow: POST, GET
Date: REGEX(.*)

4: ++++++++++++++++++++
HTTP/1.1 405 Method Not Allowed
Content-Length: 0
Allow: POST, GET
Date: REGEX(.*)

5: ++++++++++++++++++++
--TEARDOWN--
if [ "$VALGRIND" == "" ]; then
  kill $(cat ${BROKER_PID_FILE})
  rm /tmp/orion_${BROKER_PORT}.pid
else
  curl localhost:${BROKER_PORT}/exit/harakiri >> ${TEST_BASENAME}.valgrind.stop.out
  # Waiting for valgrind to terminate (sleep 10)
  sleep 10
fi
