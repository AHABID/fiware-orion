# Copyright 2013 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# fermin at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Missing Content-Type header
--SHELL-INIT--
source harnessFunctions.sh

dbInit CB
brokerStart CB

--SHELL--
(curl localhost:${BROKER_PORT}/NGSI10/queryContext -s -S --header 'Content-Type:' -d @- | xmllint --format -) <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<queryContextRequest>
  <entityIdList>
        <entityId type="Room" isPattern="false">
          <id>OfficeRoom</id>
        </entityId>
  </entityIdList>
  <attributeList/>
</queryContextRequest>
EOF
echo "1: ++++++++++++++++++++"
(curl localhost:${BROKER_PORT}/NGSI10/queryContext -s -S --header 'Content-Type: application/x-www-form-encoded' -d @- | xmllint --format -) <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<queryContextRequest>
  <entityIdList>
        <entityId type="Room" isPattern="false">
          <id>OfficeRoom</id>
        </entityId>
  </entityIdList>
  <attributeList/>
</queryContextRequest>
EOF
echo "2: ++++++++++++++++++++"
#Check that the ending "; charset=..." works (for XML)
(curl localhost:${BROKER_PORT}/NGSI10/queryContext -s -S --header 'Content-Type: application/xml; charset=UTF-8' -d @- | xmllint --format -) <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<queryContextRequest>
  <entityIdList>
        <entityId type="Room" isPattern="false">
          <id>OfficeRoom</id>
        </entityId>
  </entityIdList>
  <attributeList/>
</queryContextRequest>
EOF

# FIXME P10: enable this test once the tested functionality gets implemented (including REGEXPECT)
#Check that the ending "; charset=..." works (for JSON)
#(curl localhost:${BROKER_PORT}/NGSI10/queryContext -s -S --header 'Content-Type: application/json; charset=UTF-8' -d @- | xmllint --format -) <<EOF
#{
#	"entities": [
#		{
#			"type": "Room",
#			"isPattern": "false",
#			"id": "OfficeRoom"
#		},
#	],
#	"attributes": [ ]
#}
#EOF

--REGEXPECT--
<?xml version="1.0"?>
<orionError>
  <reason>Unsupported Media Type</reason>
  <detail>Content-Type header not used, default application/octet-stream is not supported</detail>
</orionError>
1: ++++++++++++++++++++
<?xml version="1.0"?>
<orionError>
  <reason>Unsupported Media Type</reason>
  <detail>not supported content type: application/x-www-form-encoded</detail>
</orionError>
2: ++++++++++++++++++++
<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</queryContextResponse>
--TEARDOWN--
source harnessFunctions.sh
brokerStop CB

