# Copyright 2013 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# fermin at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Subscription availability expiration check
--SHELL-INIT--
source harnessFunctions.sh

dbInit CB
brokerStart CB
accumulatorStart

--SHELL--

(curl localhost:${BROKER_PORT}/NGSI9/subscribeContextAvailability -s -S --header 'Content-Type: application/xml' -d @- | xmllint --format -) <<EOF
<?xml version="1.0"?>
<subscribeContextAvailabilityRequest>
        <entityIdList>
                <entityId type="Room" isPattern="false">
                        <id>ConferenceRoom</id>
                </entityId>
                <entityId type="Room" isPattern="false">
                        <id>BathRoom</id>
                </entityId>
        </entityIdList>
        <attributeList>
                <attribute>temperature</attribute>
        </attributeList>
        <reference>http://127.0.0.1:${LISTENER_PORT}/notify</reference>
        <duration>PT5S</duration>
</subscribeContextAvailabilityRequest>
EOF
echo "1: ++++++++++++++++++++"

#Do an register context inmediatelly after the subscription: notification is generated
(curl localhost:${BROKER_PORT}/NGSI9/registerContext -s -S --header 'Content-Type: application/xml' -d @- | xmllint --format - ) <<EOF
<?xml version="1.0"?>
  <registerContextRequest>
    <contextRegistrationList>
      <contextRegistration>
        <entityIdList>
          <entityId type="Room" isPattern="false">
            <id>ConferenceRoom</id>
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>temperature</name>
            <type>degree</type>
            <isDomain>false</isDomain>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <providingApplication>http://localhost:1028</providingApplication>
      </contextRegistration>
    </contextRegistrationList>
    <duration>PT1H</duration>
    <registrationId></registrationId>
  </registerContextRequest>
EOF
echo "2: ++++++++++++++++++++"

#Do an register context after subscription expiration: notification is not generated
sleep 6s
(curl localhost:${BROKER_PORT}/NGSI9/registerContext -s -S --header 'Content-Type: application/xml' -d @- | xmllint --format - ) <<EOF
<?xml version="1.0"?>
  <registerContextRequest>
    <contextRegistrationList>
      <contextRegistration>
        <entityIdList>
          <entityId type="Room" isPattern="false">
            <id>BathRoom</id>
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>temperature</name>
            <type>degree</type>
            <isDomain>false</isDomain>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <providingApplication>http://localhost:1028</providingApplication>
      </contextRegistration>
    </contextRegistrationList>
    <duration>PT1H</duration>
    <registrationId></registrationId>
  </registerContextRequest>
EOF
echo "3: ++++++++++++++++++++"

#Get accumulated data
curl localhost:${LISTENER_PORT}/dump -s -S

--REGEXPECT--
<?xml version="1.0"?>
<subscribeContextAvailabilityResponse>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <duration>PT5S</duration>
</subscribeContextAvailabilityResponse>
1: ++++++++++++++++++++
<?xml version="1.0"?>
<registerContextResponse>
  <duration>PT1H</duration>
  <registrationId>REGEX([0-9a-f]{24})</registrationId>
</registerContextResponse>
2: ++++++++++++++++++++
<?xml version="1.0"?>
<registerContextResponse>
  <duration>PT1H</duration>
  <registrationId>REGEX([0-9a-f]{24})</registrationId>
</registerContextResponse>
3: ++++++++++++++++++++
POST http://127.0.0.1:REGEX(\d+)/notify
Content-Length: 840
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: 127.0.0.1:REGEX(\d+)
Accept: application/xml, application/json
Content-Type: application/xml

<notifyContextAvailabilityRequest>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="Room" isPattern="false">
            <id>ConferenceRoom</id>
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>temperature</name>
            <type>degree</type>
            <isDomain>false</isDomain>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <providingApplication>http://localhost:1028</providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</notifyContextAvailabilityRequest>

=======================================
--TEARDOWN--
source harnessFunctions.sh

brokerStop CB
accumulatorStop
