# Copyright 2013 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# fermin at tid dot es

--NAME--
Accept header fail
--SHELL-INIT--
# Test to see if we have a broker running on ${BROKER_PORT} if so kill it!
running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
if [ $running_broker -ne 0 ]; then
  kill $(ps -fe | grep contextBroker | grep ${BROKER_PORT} | awk '{print $2}')
  # Wait some time so the broker can finish properly
  sleep 1
  running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
  if [ $running_broker -ne 0 ]; then
    # If the broker refuses to stop politely, kill the process by brute force
    kill -9 $(ps -fe | grep contextBroker | grep ${BROKER_PORT} | awk '{print $2}')
    sleep 1
    running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
    if [ $running_broker -ne 0 ]; then
      echo "Existing contextBroker is inmortal, can not be killed!"
      exit 1
    fi
  fi
fi

echo 'db.dropDatabase()' | mongo ${BROKER_DATABASE_NAME} --quiet
CB_START_CMD="contextBroker -harakiri -port ${BROKER_PORT} -pidpath ${BROKER_PID_FILE} -db ${BROKER_DATABASE_NAME} -t 0-255"
if [ "$VALGRIND" == "" ]; then
  $CB_START_CMD
  # Wait some time so that the contextBroker is able to do its initial steps (reset database, start HTTP server, etc.)
  sleep 1
else
  valgrind $CB_START_CMD > ${TEST_BASENAME}.valgrind.out 2>&1 &
  # Waiting for valgrind to start (sleep 10)
  sleep 10s
fi

# Test to see if we have a broker running on ${BROKER_PORT} if not raise an error
running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
if [ $running_broker -ne 1 ]; then
  echo "Unable to start contextBroker"
  exit 1
fi

--SHELL--

# Note that curl by default uses "Accept: */*" so this step is testing that "no header" is interpreted as
# "Accept: */*" according to HTTP RFC
response=$((curl localhost:${BROKER_PORT}/NGSI10/queryContext -s -S --dump-header headers.out --header 'Content-Type: application/xml' --header 'Accept:' -d @- ) <<EOF
<?xml version="1.0"?>
<queryContextRequest>
  <entityIdList>
        <entityId type="Room" isPattern="false">
          <id>OfficeRoom</id>
        </entityId>
  </entityIdList>
  <attributeList/>
</queryContextRequest>
EOF)
cat headers.out
echo $response | xmllint --format -
echo "1: ++++++++++++++++++++"

# This test will always fail
response=$((curl localhost:${BROKER_PORT}/NGSI10/queryContext -s -S --dump-header headers.out --header 'Content-Type: application/xml' --header 'Accept: text/plain' -d @- ) <<EOF
no meaningful payload (failing tests)
EOF)
cat headers.out
echo $response | xmllint --format -
echo "2: ++++++++++++++++++++"

# This test that explicit "Accept: application/xml" is ok
response=$((curl localhost:${BROKER_PORT}/NGSI10/queryContext -s -S --dump-header headers.out --header 'Content-Type: application/xml' --header 'Accept: application/xml' -d @- ) <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<queryContextRequest>
  <entityIdList>
        <entityId type="Room" isPattern="false">
          <id>OfficeRoom</id>
        </entityId>
  </entityIdList>
  <attributeList/>
</queryContextRequest>
EOF)
cat headers.out
echo $response | xmllint --format -
echo "3: ++++++++++++++++++++"

# This test uses a list in Accept which a valid type is found is ok
response=$((curl localhost:${BROKER_PORT}/NGSI10/queryContext -s -S --dump-header headers.out --header 'Content-Type: application/xml' --header 'Accept: text/plain, application/xml' -d @-) <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<queryContextRequest>
  <entityIdList>
        <entityId type="Room" isPattern="false">
          <id>OfficeRoom</id>
        </entityId>
  </entityIdList>
  <attributeList/>
</queryContextRequest>
EOF)
cat headers.out
echo $response | xmllint --format -
echo "4: ++++++++++++++++++++"

# This test uses a list in Accept which a valid type is found is ok (with extra encoding after ";")
response=$((curl localhost:${BROKER_PORT}/NGSI10/queryContext -s -S --dump-header headers.out --header 'Content-Type: application/xml' --header 'Accept: text/plain, application/xml; charset=UTF-8' -d @- ) <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<queryContextRequest>
  <entityIdList>
        <entityId type="Room" isPattern="false">
          <id>OfficeRoom</id>
        </entityId>
  </entityIdList>
  <attributeList/>
</queryContextRequest>
EOF)
cat headers.out
echo $response | xmllint --format -
echo "5: ++++++++++++++++++++"

# This test uses a list in Accept which no valid types
response=$((curl localhost:${BROKER_PORT}/NGSI10/queryContext -s -S --dump-header headers.out --header 'Content-Type: application/xml' --header 'Accept: text/plain, image/jpeg' -d @- ) <<EOF
no meaningful payload (failing tests)
EOF)
cat headers.out
echo $response | xmllint --format -
echo "6: ++++++++++++++++++++"

# This test uses a list in Accept which no valid type (with extra encoding after ";")
response=$((curl localhost:${BROKER_PORT}/NGSI10/queryContext -s -S --dump-header headers.out --header 'Content-Type: application/xml' --header 'Accept: text/plain, image/jpeg; charset=UTF-8' -d @- ) <<EOF
no meaningful payload (failing tests)
EOF)
cat headers.out
echo $response | xmllint --format -
echo "7: ++++++++++++++++++++"

# FIXME P10: enable this test once the tested functionality gets implemented (including REGEXPECT)
# This test that explicit "Accept: application/json" is ok
#(curl localhost:${BROKER_PORT}/NGSI10/queryContext -s -S --header 'Content-Type: application/json' --header 'Accept: application/json' -d @- | xmllint --format -) <<EOF
#{
#	"entities": [
#		{
#			"type": "Room",
#			"isPattern": "false",
#			"id": "OfficeRoom"
#		},
#	],
#	"attributes": [ ]
#}
#EOF
#echo "8: ++++++++++++++++++++"

# FIXME P10: enable this test once the tested functionality gets implemented (including REGEXPECT)
# This test that Accept preference is correctly taken into account (JSON preferred to XML)
#(curl localhost:${BROKER_PORT}/NGSI10/queryContext -s -S --header 'Content-Type: application/json' --header 'Accept: application/json, application/xml' -d @- | xmllint --format -) <<EOF
#{
#	"entities": [
#		{
#			"type": "Room",
#			"isPattern": "false",
#			"id": "OfficeRoom"
#		},
#	],
#	"attributes": [ ]
#}
#EOF
#echo "9: ++++++++++++++++++++"

# FIXME P10: enable this test once the tested functionality gets implemented (including REGEXPECT)
# This test that Accept preference is correctly taken into account (XML preferred to JSON)
#(curl localhost:${BROKER_PORT}/NGSI10/queryContext -s -S --header 'Content-Type: application/xml' --header 'Accept: application/xml, application/json' -d @- | xmllint --format -) <<EOF
# Note the "<-" in the following line, this is a way of "skipping" fragment generation by xmlExtractor.py while this step is activated
#<-?xml version="1.0" encoding="UTF-8"?>
#<queryContextRequest>
#  <entityIdList>
#        <entityId type="Room" isPattern="false">
#          <id>OfficeRoom</id>
#        </entityId>
#  </entityIdList>
#  <attributeList/>
#</queryContextRequest>
#EOF
#echo "10: ++++++++++++++++++++"

# FIXME P10: enable this test once the tested functionality gets implemented (including REGEXPECT)
# Cross Accept/Content-Type XML/JSON test (only a weird client will do this, but it is theoretically possible)
#(curl localhost:${BROKER_PORT}/NGSI10/queryContext -s -S --header 'Content-Type: application/json' --header 'Accept: application/xml' -d @- | xmllint --format -) <<EOF
#{
#	"entities": [
#		{
#			"type": "Room",
#			"isPattern": "false",
#			"id": "OfficeRoom"
#		},
#	],
#	"attributes": [ ]
#}
#EOF
#echo "11: ++++++++++++++++++++"

# FIXME P10: enable this test once the tested functionality gets implemented (including REGEXPECT)
# Cross Accept/Content-Type JSON/XML test (only a weird client will do this, but it is theoretically possible)
#(curl localhost:${BROKER_PORT}/NGSI10/queryContext -s -S --header 'Content-Type: application/xml' --header 'Accept: application/json' -d @- | xmllint --format -) <<EOF
# Note the "<-" in the following line, this is a way of "skipping" fragment generation by xmlExtractor.py while this step is activated
#<-?xml version="1.0" encoding="UTF-8"?>
#<queryContextRequest>
#  <entityIdList>
#        <entityId type="Room" isPattern="false">
#          <id>OfficeRoom</id>
#        </entityId>
#  </entityIdList>
#  <attributeList/>
#</queryContextRequest>
#EOF
#echo "12: ++++++++++++++++++++"

--REGEXPECT--
HTTP/1.1 200 OK
Content-Length: 156
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context elements found</reasonPhrase>
  </errorCode>
</queryContextResponse>
1: ++++++++++++++++++++
HTTP/1.1 406 Not Acceptable
Connection: close
Content-Length: 159
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<orionError>
  <reason>Not Acceptable</reason>
  <detail>aceptable types: application/xml but Accept header in request was: 'text/plain'</detail>
</orionError>
2: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 156
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context elements found</reasonPhrase>
  </errorCode>
</queryContextResponse>
3: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 156
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context elements found</reasonPhrase>
  </errorCode>
</queryContextResponse>
4: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 156
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context elements found</reasonPhrase>
  </errorCode>
</queryContextResponse>
5: ++++++++++++++++++++
HTTP/1.1 406 Not Acceptable
Connection: close
Content-Length: 171
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<orionError>
  <reason>Not Acceptable</reason>
  <detail>aceptable types: application/xml but Accept header in request was: 'text/plain, image/jpeg'</detail>
</orionError>
6: ++++++++++++++++++++
HTTP/1.1 406 Not Acceptable
Connection: close
Content-Length: 186
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<orionError>
  <reason>Not Acceptable</reason>
  <detail>aceptable types: application/xml but Accept header in request was: 'text/plain, image/jpeg; charset=UTF-8'</detail>
</orionError>
7: ++++++++++++++++++++
--TEARDOWN--
if [ "$VALGRIND" == "" ]; then
  kill $(cat ${BROKER_PID_FILE})
  rm /tmp/orion_${BROKER_PORT}.pid
else
  curl localhost:${BROKER_PORT}/exit/harakiri >> ${TEST_BASENAME}.valgrind.stop.out
  # Waiting for valgrind to terminate (sleep 10)
  sleep 10
fi
