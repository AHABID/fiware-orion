# Copyright 2013 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# fermin at tid dot es

--NAME--
JSON Parse Post NotifyContext
--SHELL-INIT--
# Test to see if we have a broker running on ${BROKER_PORT} if so kill it!
running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
if [ $running_broker -ne 0 ]; then
  kill $(ps -fe | grep contextBroker | grep ${BROKER_PORT} | awk '{print $2}')
  # Wait some time so the broker can finish properly
  sleep 1
  running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
  if [ $running_broker -ne 0 ]; then
    # If the broker refuses to stop politely, kill the process by brute force
    kill -9 $(ps -fe | grep contextBroker | grep ${BROKER_PORT} | awk '{print $2}')
    sleep 1
    running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
    if [ $running_broker -ne 0 ]; then
      echo "Existing contextBroker is inmortal, can not be killed!"
      exit 1
    fi
  fi
fi

echo 'db.dropDatabase()' | mongo ${BROKER_DATABASE_NAME} --quiet
CB_START_CMD="contextBroker -harakiri -port ${BROKER_PORT} -pidpath ${BROKER_PID_FILE} -db ${BROKER_DATABASE_NAME} -t 0-255"
if [ "$VALGRIND" == "" ]; then
  $CB_START_CMD
  # Wait some time so that the contextBroker is able to do its initial steps (reset database, start HTTP server, etc.)
  sleep 1
else
  valgrind $CB_START_CMD > ${TEST_BASENAME}.valgrind.out 2>&1 &
  # Waiting for valgrind to start (sleep 10)
  sleep 10s
fi

# Test to see if we have a broker running on ${BROKER_PORT} if not raise an error
running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
if [ $running_broker -ne 1 ]; then
  echo "Unable to start contextBroker"
  exit 1
fi

--SHELL--
echo "1: ***********************************"
(curl localhost:${BROKER_PORT}/NGSI10/notifyContext -s -S -i --header 'Content-Type: application/json' --header 'Accept: application/json' -d @- ) << EOF
{
	"subscriptionId": "012345678901234567890123",
	"originator": "http://localhost/test",
	"contextResponses": [
		{
			"contextElement": {
				"type": "Room",
				"isPattern": "false",
				"id": "ConferenceRoom",
        "attributeDomainName" : "ADN",
				"attributes": [
					{
						"name": "temperature",
						"type": "Room",
						"value": "10",
						"metadatas": [
							{
								"name": "ID",
								"type": "string",
								"value": "1110"
							},
							{
								"name": "id",
								"type": "integer",
								"value": "12"
							}
						]
					},
					{
						"name": "temperature",
						"type": "Room",
						"value": "10",
						"metadatas": [
							{
								"name": "ID",
								"type": "string",
								"value": "1110"
							},
							{
								"name": "id",
								"type": "integer",
								"value": "55"
							}
						]
					}
				],
				"metadatas": [
					{
						"name": "m1",
						"type": "t1",
						"value": "v1"
					},
					{
						"name": "m2",
						"type": "t2",
						"value": "v2"
					}
				]
			},
			"statusCode": {
				"code": "200",
				"reasonPhrase": "Ok",
				"details": "a"
			}
		}
	]
}
EOF
echo "2: ***********************************"
--REGEXPECT--
1: ***********************************
HTTP/1.1 100 Continue

HTTP/1.1 200 OK
Content-Length: 75
Content-Type: application/json
Date: REGEX(.*)

{
  "responseCode" : {
    "code" : "200",
    "reasonPhrase" : "OK"
  }
}
2: ***********************************
--TEARDOWN--
if [ "$VALGRIND" == "" ]; then
  kill $(cat ${BROKER_PID_FILE})
  rm /tmp/orion_${BROKER_PORT}.pid
else
  curl localhost:${BROKER_PORT}/exit/harakiri >> ${TEST_BASENAME}.valgrind.stop.out
  # Waiting for valgrind to terminate (sleep 10)
  sleep 10
fi
