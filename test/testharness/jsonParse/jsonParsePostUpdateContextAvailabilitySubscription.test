# Copyright 2013 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# fermin at tid dot es

--NAME--
JSON Parse Post UpdateContextAvailabilitySubscription
--SHELL-INIT--
# Test to see if we have a broker running on ${BROKER_PORT} if so kill it!
running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
if [ $running_broker -ne 0 ]; then
  kill $(ps -fe | grep contextBroker | grep ${BROKER_PORT} | awk '{print $2}')
  # Wait some time so the broker can finish properly
  sleep 1
  running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
  if [ $running_broker -ne 0 ]; then
    # If the broker refuses to stop politely, kill the process by brute force
    kill -9 $(ps -fe | grep contextBroker | grep ${BROKER_PORT} | awk '{print $2}')
    sleep 1
    running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
    if [ $running_broker -ne 0 ]; then
      echo "Existing contextBroker is inmortal, can not be killed!"
      exit 1
    fi
  fi
fi

echo 'db.dropDatabase()' | mongo ${BROKER_DATABASE_NAME} --quiet
CB_START_CMD="contextBroker -harakiri -port ${BROKER_PORT} -pidpath ${BROKER_PID_FILE} -db ${BROKER_DATABASE_NAME} -t 0-255"
if [ "$VALGRIND" == "" ]; then
  $CB_START_CMD
  # Wait some time so that the contextBroker is able to do its initial steps (reset database, start HTTP server, etc.)
  sleep 1
else
  valgrind $CB_START_CMD > ${TEST_BASENAME}.valgrind.out 2>&1 &
  # Waiting for valgrind to start (sleep 10)
  sleep 10s
fi

# Test to see if we have a broker running on ${BROKER_PORT} if not raise an error
running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
if [ $running_broker -ne 1 ]; then
  echo "Unable to start contextBroker"
  exit 1
fi

--SHELL--
echo "1: ***********************************"
(curl localhost:${BROKER_PORT}/NGSI9/updateContextAvailabilitySubscription -s -S --header 'Content-Type: application/json' --header 'Accept: application/json' -d @- ) << EOF
{
	"entities": [
		{
			"type": "Room",
			"isPattern": "false",
			"id": "ConferenceRoom"
		},
		{
			"type": "Room",
			"isPattern": "false",
			"id": "OfficeRoom"
		}
	],
	"attributes": [
		"temperature",
		"occupancy",
		"lightstatus"
	],
	"duration": "PT1M",
	"restriction": {
		"attributeExpression" : "AE",
		"scopes": [
			{
				"type" : "st1",
				"value" : "1"
			},
			{
				"type" : "st2",
				"value" : "2"
			}
		]
	},
	"subscriptionId" : "012345678901234567890123"
}
EOF
echo "2: ***********************************"
OUT=$((curl localhost:${BROKER_PORT}/NGSI9/subscribeContextAvailability -s -S --header 'Content-Type: application/json' --header 'Accept: application/json' -d @- ) << EOF
{
  "entities": [
    {
      "type": "Room",
      "isPattern": "false",
      "id": "ConferenceRoom"
    },
    {
      "type": "Room",
      "isPattern": "false",
      "id": "OfficeRoom"
    }
  ],
  "attributes": [
    "temperature",
    "occupancy",
    "lightstatus"
  ],
  "reference": "http://10.1.1.1:80/test/interfaceNotification",
  "duration": "PT1M",
  "subscriptionId": "12458896",
  "restriction" : {
    "attributeExpression" : "ATTR_EXPR",
    "scopes" : [
      {
        "value" : "sv1",
        "type"  : "st1"
      },
      {
        "value" : "sv2",
        "type"  : "st2"
      }
    ]
  }
}
EOF)
SUB_ID=$(echo "$OUT" | grep subscriptionId | awk -F\" '{ print $4}')
echo "$OUT"

echo "3: ***********************************"
(curl localhost:${BROKER_PORT}/NGSI9/updateContextAvailabilitySubscription -s -S --header 'Content-Type: application/json' --header 'Accept: application/json' -d @- ) << EOF
{
	"entities": [
		{
			"type": "Room",
			"isPattern": "false",
			"id": "ConferenceRoom"
		},
		{
			"type": "Room",
			"isPattern": "false",
			"id": "OfficeRoom"
		}
	],
	"attributes": [
		"temperature",
		"occupancy",
		"lightstatus"
	],
	"duration": "PT1S",
	"restriction": {
		"attributeExpression" : "AE",
		"scopes": [
			{
				"type" : "st1",
				"value" : "1"
			},
			{
				"type" : "st2",
				"value" : "2"
			}
		]
	},
	"subscriptionId" : "${SUB_ID}"
}
EOF
echo "4: ***********************************"
--REGEXPECT--
1: ***********************************
"updateContextAvailabilitySubscriptionResponse" : {
  "subscriptionId" : "012345678901234567890123",
  "errorCode" : {
    "code" : "404",
    "reasonPhrase" : "Subscription Not Found"
  }
}
2: ***********************************
"subscribeContextAvailabilityResponse" : {
  "subscriptionId" : "REGEX([0-9a-f]{24})"
  "duration" : "PT1M",
}
3: ***********************************
"updateContextAvailabilitySubscriptionResponse" : {
  "subscriptionId" : "REGEX([0-9a-f]{24})",
  "duration" : "PT1S",
}
4: ***********************************
--TEARDOWN--
if [ "$VALGRIND" == "" ]; then
  kill $(cat ${BROKER_PID_FILE})
  rm /tmp/orion_${BROKER_PORT}.pid
else
  curl localhost:${BROKER_PORT}/exit/harakiri >> ${TEST_BASENAME}.valgrind.stop.out
  # Waiting for valgrind to terminate (sleep 10)
  sleep 10
fi
