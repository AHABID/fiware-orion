# Copyright 2013 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# fermin at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
JSON Parse Post DiscoverContextAvailability
--SHELL-INIT--
# Test to see if we have a broker running on ${BROKER_PORT} if so kill it!
running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
if [ $running_broker -ne 0 ]; then
  kill $(ps -fe | grep contextBroker | grep ${BROKER_PORT} | awk '{print $2}')
  # Wait some time so the broker can finish properly
  sleep 1
  running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
  if [ $running_broker -ne 0 ]; then
    # If the broker refuses to stop politely, kill the process by brute force
    kill -9 $(ps -fe | grep contextBroker | grep ${BROKER_PORT} | awk '{print $2}')
    sleep 1
    running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
    if [ $running_broker -ne 0 ]; then
      echo "Existing contextBroker is inmortal, can not be killed!"
      exit 1
    fi
  fi
fi

echo 'db.dropDatabase()' | mongo ${BROKER_DATABASE_NAME} --quiet
CB_START_CMD="contextBroker -harakiri -port ${BROKER_PORT} -pidpath ${BROKER_PID_FILE} -db ${BROKER_DATABASE_NAME} -t 0-255"
if [ "$VALGRIND" == "" ]; then
  $CB_START_CMD
  # Wait some time so that the contextBroker is able to do its initial steps (reset database, start HTTP server, etc.)
  sleep 1
else
  valgrind $CB_START_CMD > ${TEST_BASENAME}.valgrind.out 2>&1 &
  # Waiting for valgrind to start (sleep 10)
  sleep 10s
fi

# Test to see if we have a broker running on ${BROKER_PORT} if not raise an error
running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
if [ $running_broker -ne 1 ]; then
  echo "Unable to start contextBroker"
  exit 1
fi

--SHELL--
echo "+++++ Starting +++++++++++++++"
(curl localhost:${BROKER_PORT}/NGSI9/registerContext -s -S -i --header 'Content-Type: application/json' --header 'Accept: application/json' -d @- ) << EOF
{
  "contextRegistrations": [
    {
      "entities": [
        {
          "type": "Room",
          "isPattern": "false",
          "id": "ConferenceRoom"
        },
        {
          "type": "Room",
          "isPattern": "false",
          "id": "OfficeRoom"
        }
      ],
      "attributes": [
        {
          "name": "temperature",
          "type": "degree",
          "isDomain": "false",
          "metadatas": [
            {
              "name": "ID",
              "type": "string",
              "value": "1110"
            }
          ]
        }
      ],
      "metadatas": [
        {
          "name": "ID",
          "type": "string",
          "value": "2212"
        }
      ],
      "providingApplication": "http://192.168.100.1:70/application"
    }
  ],
  "duration": "PT1M"
}
EOF
echo "+++++ Registration 1 Done +++++++++++++++"

(curl localhost:${BROKER_PORT}/NGSI9/discoverContextAvailability -s -S -i --header 'Content-Type: application/json' --header 'Accept: application/json' -d @- ) << EOF
{
  "entities": [
    {
      "type": "Room",
      "isPattern": "false",
      "id": "ConferenceRoom"
    },
    {
      "type": "Room",
      "isPattern": "false",
      "id": "OfficeRoom"
    }
  ],
  "attributes": [
    "temperature",
    "pressure"
  ],
  "restriction": {
    "attributeExpression" : "Attribute Expression",
    "scopes": [
      {
        "type" : "st1",
        "value" : "sv1"
      },
      {
        "type" : "st2",
        "value" : "sv2"
      }
    ]
  }
}
EOF
echo "+++++ Discovery 1 Done +++++++++++++++"
echo "+++++ Register 2: two attributes in vector +++++++++++++++"
(curl localhost:${BROKER_PORT}/NGSI9/registerContext -s -S -i --header 'Content-Type: application/json' --header 'Accept: application/json' -d @- ) << EOF
{
  "contextRegistrations": [
    {
      "entities": [
        {
          "type": "Room",
          "isPattern": "false",
          "id": "BathRoom"
        }
      ],
      "attributes": [
        {
          "name": "temperature",
          "type": "degree",
          "isDomain": "false",
          "metadatas": [
            {
              "name": "ID",
              "type": "string",
              "value": "1110"
            }
          ]
        },
        {
          "name": "pressure",
          "type": "bar",
          "isDomain": "false",
          "metadatas": [
            {
              "name": "ID",
              "type": "string",
              "value": "1110"
            }
          ]
        }
      ],
      "metadatas": [
        {
          "name": "ID",
          "type": "string",
          "value": "2212"
        }
      ],
      "providingApplication": "http://192.168.100.1:70/application"
    }
  ],
  "duration": "PT1M"
}
EOF
echo "+++++ Registration 2 Done +++++++++++++++"

(curl localhost:${BROKER_PORT}/NGSI9/discoverContextAvailability -s -S -i --header 'Content-Type: application/json' --header 'Accept: application/json' -d @- ) << EOF
{
  "entities": [
    {
      "type": "Room",
      "isPattern": "false",
      "id": "BathRoom"
    }
  ],
  "attributes": [
    "temperature",
    "pressure"
  ],
  "restriction": {
    "attributeExpression" : "Attribute Expression",
    "scopes": [
      {
        "type" : "st1",
        "value" : "sv1"
      },
      {
        "type" : "st2",
        "value" : "sv2"
      }
    ]
  }
}
EOF
echo "+++++ Discovery 2 Done +++++++++++++++"
--REGEXPECT--
+++++ Starting +++++++++++++++
HTTP/1.1 200 OK
Content-Length: 75
Content-Type: application/json
Date: REGEX(.*)

{
  "duration" : "PT1M",
  "registrationId" : "REGEX([0-9a-f]{24})"
}
+++++ Registration 1 Done +++++++++++++++
HTTP/1.1 200 OK
Content-Length: 607
Content-Type: application/json
Date: REGEX(.*)

{
  "contextRegistrationResponses" : [
    {
      "contextRegistration" : {
        "entities" : [
          {
            "type" : "Room",
            "isPattern" : "false",
            "id" : "ConferenceRoom"
          },
          {
            "type" : "Room",
            "isPattern" : "false",
            "id" : "OfficeRoom"
          }
        ],
        "attributes" : [
          {
            "name" : "temperature",
            "type" : "degree",
            "isDomain" : "false"
          }
        ],
        "providingApplication" : "http://192.168.100.1:70/application"
      }
    }
  ]
}
+++++ Discovery 1 Done +++++++++++++++
+++++ Register 2: two attributes in vector +++++++++++++++
HTTP/1.1 200 OK
Content-Length: 75
Content-Type: application/json
Date: REGEX(.*)

{
  "duration" : "PT1M",
  "registrationId" : "REGEX([0-9a-f]{24})"
}
+++++ Registration 2 Done +++++++++++++++
HTTP/1.1 200 OK
Content-Length: 599
Content-Type: application/json
Date: REGEX(.*)

{
  "contextRegistrationResponses" : [
    {
      "contextRegistration" : {
        "entities" : [
          {
            "type" : "Room",
            "isPattern" : "false",
            "id" : "BathRoom"
          }
        ],
        "attributes" : [
          {
            "name" : "temperature",
            "type" : "degree",
            "isDomain" : "false"
          },
          {
            "name" : "pressure",
            "type" : "bar",
            "isDomain" : "false"
          }
        ],
        "providingApplication" : "http://192.168.100.1:70/application"
      }
    }
  ]
}
+++++ Discovery 2 Done +++++++++++++++
--TEARDOWN--
if [ "$VALGRIND" == "" ]; then
  kill $(cat ${BROKER_PID_FILE})
  rm /tmp/orion_${BROKER_PORT}.pid
else
  curl localhost:${BROKER_PORT}/exit/harakiri >> ${TEST_BASENAME}.valgrind.stop.out
  # Waiting for valgrind to terminate (sleep 10)
  sleep 10
fi
