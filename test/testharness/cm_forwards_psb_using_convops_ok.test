# Copyright 2013 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# fermin at tid dot es

--NAME--
CM forwards PSB using ConvOp
--SHELL-INIT--
# Test to see if we have a broker running on ${BROKER_PORT} if so kill it!
running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
if [ $running_broker -ne 0 ]; then
  kill $(ps -fe | grep contextBroker | grep ${BROKER_PORT} | awk '{print $2}')
  # Wait some time so the broker can finish properly
  sleep 1
  running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
  if [ $running_broker -ne 0 ]; then
    # If the broker refuses to stop politely, kill the process by brute force
    kill -9 $(ps -fe | grep contextBroker | grep ${BROKER_PORT} | awk '{print $2}')
    sleep 1
    running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
    if [ $running_broker -ne 0 ]; then
      echo "Existing contextBroker is inmortal, can not be killed!"
      exit 1
    fi
  fi
fi

echo 'db.dropDatabase()' | mongo ${BROKER_DATABASE_NAME} --quiet
contextBroker -port ${BROKER_PORT} -pidpath ${BROKER_PID_FILE} -db ${BROKER_DATABASE_NAME} -t255
# Wait some time so that the contextBroker is able to do its initial steps (reset database, start HTTP server, etc.)
sleep 1



# Test to see if we have a broker running on ${BROKER_PORT} if not raise an error
running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
if [ $running_broker -ne 1 ]; then
  echo "Unable to start contextBroker"
  exit 1
fi

# Test to see if we have a broker running on ${CM_PORT} if so kill it!
running_broker=$(ps -fe | grep contextBroker | grep ${CM_PORT} | wc -l)
if [ $running_broker -ne 0 ]; then
  kill $(ps -fe | grep contextBroker | grep ${CM_PORT} | awk '{print $2}')
  # Wait some time so the broker can finish properly
  sleep 1
  running_broker=$(ps -fe | grep contextBroker | grep ${CM_PORT} | wc -l)
  if [ $running_broker -ne 0 ]; then
    # If the broker refuses to stop politely, kill the process by brute force
    kill -9 $(ps -fe | grep contextBroker | grep ${CM_PORT} | awk '{print $2}')
    sleep 1
    running_broker=$(ps -fe | grep contextBroker | grep ${CM_PORT} | wc -l)
    if [ $running_broker -ne 0 ]; then
      echo "Existing contextBroker is inmortal, can not be killed!"
      exit 1
    fi
  fi
fi

mkdir /tmp/configManager
echo 'db.dropDatabase()' | mongo ${BROKER_DATABASE_AUX_NAME} --quiet
contextBroker -logDir /tmp/configManager -ngsi9 -port ${CM_PORT} -pidpath ${BROKER_PID_FILE_AUX} -db ${BROKER_DATABASE_AUX_NAME} -fwdPort ${BROKER_PORT} -t0-255
# Wait some time so that the contextBroker is able to do its initial steps (reset database, start HTTP server, etc.)
sleep 1

# Test to see if we have a broker running on ${BROKER_PORT} if not raise an error
running_broker=$(ps -fe | grep contextBroker | grep ${CM_PORT} | wc -l)
if [ $running_broker -ne 1 ]; then
  echo "Unable to start contextBroker"
  exit 1
fi

--SHELL--

# Do a NGSI10 request to check that the CM does not accept NGSI10 requests
response=$((curl localhost:${CM_PORT}/NGSI10/queryContext -s -S --dump-header headers.out --header 'Content-Type: application/xml' -d @- | xmllint --format -) <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<queryContextRequest>
  <entityIdList>
    <entityId type="Room" isPattern="false">
      <id>OfficeRoom</id>
    </entityId>
  </entityIdList>
  <attributeList>
    <attribute>pressure</attribute>
    <attribute>lightstatus</attribute>
  </attributeList>
</queryContextRequest>
EOF)
cat headers.out
echo $response | xmllint --format -
echo "1: ++++++++++++++++++++"

# Do initial registration in the CM
response=$((curl localhost:${CM_PORT}/NGSI9/contextEntities/ConferenceRoom -s -S --dump-header headers.out --header 'Content-Type: application/xml' -d @- | xmllint --format - ) <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<registerProviderRequest>
  <metadata>
    <contextMetadata>
      <name>ID</name>
      <type>string</type>
      <value>1110</value>
    </contextMetadata>
    <contextMetadata>
      <name>cm2</name>
      <type>string</type>
      <value>XXX</value>
    </contextMetadata>
  </metadata>
  <duration>PT1H</duration>
  <providingApplication>http://localhost:1028/application</providingApplication>
</registerProviderRequest>
EOF)
cat headers.out
echo $response | xmllint --format -
REG_ID=$(echo "$response" | grep registrationId | awk -F '>' '{print $2}' | awk -F '<' '{print $1}' | grep -v '^$' )
echo "2: ++++++++++++++++++++"

# Check the registration in CM 
response=$((curl localhost:${CM_PORT}/NGSI9/discoverContextAvailability -s -S --dump-header headers.out --header 'Content-Type: application/xml' -d @- | xmllint --format - ) <<EOF
<?xml version="1.0" encoding="UTF-8"?>
  <discoverContextAvailabilityRequest>
    <entityIdList>
      <entityId type="" isPattern="false">
        <id>ConferenceRoom</id>
      </entityId>
    </entityIdList>
  </discoverContextAvailabilityRequest>
EOF)
cat headers.out
echo $response | xmllint --format -
echo "3: ++++++++++++++++++++"

# Check the registration in PSB
response=$((curl localhost:${BROKER_PORT}/NGSI9/discoverContextAvailability -s -S --dump-header headers.out --header 'Content-Type: application/xml' -d @- | xmllint --format - ) <<EOF
<?xml version="1.0" encoding="UTF-8"?>
  <discoverContextAvailabilityRequest>
    <entityIdList>
      <entityId type="" isPattern="false">
        <id>ConferenceRoom</id>
      </entityId>
    </entityIdList>
  </discoverContextAvailabilityRequest>
EOF)
cat headers.out
echo $response | xmllint --format -
echo "4: ++++++++++++++++++++"

# Update registration in CM
response=$((curl localhost:${CM_PORT}/NGSI9/contextEntities/MyCar -s -S --dump-header headers.out --header 'Content-Type: application/xml' -d @- | xmllint --format - ) <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<registerProviderRequest>
  <metadata>
    <contextMetadata>
      <name>ID</name>
      <type>string</type>
      <value>1110</value>
    </contextMetadata>
    <contextMetadata>
      <name>cm2</name>
      <type>string</type>
      <value>XXX</value>
    </contextMetadata>
  </metadata>
  <duration>PT9H</duration>
  <providingApplication>http://localhost:1028/mycar</providingApplication>
  <registrationId>$REG_ID</registrationId>
</registerProviderRequest>
EOF)
cat headers.out
echo $response | xmllint --format -
echo "5: ++++++++++++++++++++"

# Check the registration in CM
response=$((curl localhost:${CM_PORT}/NGSI9/discoverContextAvailability -s -S --dump-header headers.out --header 'Content-Type: application/xml' -d @- | xmllint --format - ) <<EOF
<?xml version="1.0" encoding="UTF-8"?>
  <discoverContextAvailabilityRequest>
    <entityIdList>
      <entityId type="" isPattern="false">
        <id>MyCar</id>
      </entityId>
    </entityIdList>
  </discoverContextAvailabilityRequest>
EOF)
cat headers.out
echo $response | xmllint --format -
echo "6: ++++++++++++++++++++"

# Check the registration in PSB
response=$((curl localhost:${BROKER_PORT}/NGSI9/discoverContextAvailability -s -S --dump-header headers.out --header 'Content-Type: application/xml' -d @- | xmllint --format - ) <<EOF
<?xml version="1.0" encoding="UTF-8"?>
  <discoverContextAvailabilityRequest>
    <entityIdList>
      <entityId type="" isPattern="false">
        <id>MyCar</id>
      </entityId>
    </entityIdList>
  </discoverContextAvailabilityRequest>
EOF)
cat headers.out
echo $response | xmllint --format -
echo "7: ++++++++++++++++++++"

# Check that everything is ok at database layer
mongo --quiet ${BROKER_DATABASE_NAME} << EOF
db.registrations.count()
EOF

mongo --quiet ${BROKER_DATABASE_AUX_NAME} << EOF
db.registrations.count()
EOF

RESULT=$(mongo --quiet ${BROKER_DATABASE_NAME} <<EOF
db.registrations.find({}, {_id: 1})
EOF)
# The next line is based in processing the following pattern:
#   { "_id" : ObjectId("5213a9a1db818a34990755c3") }
ID1=$(echo $RESULT | awk '{print $4}' | awk -F '"' '{print $2}')

RESULT=$(mongo --quiet ${BROKER_DATABASE_AUX_NAME} <<EOF
db.registrations.find({}, {fwdRegId: 1, _id: 0})
EOF)
# The next line is based in processing the following pattern:
#   { "fwdRegId" : "5213a9a1db818a34990755c3" }
ID2=$(echo $RESULT | awk '{print $4}' | awk -F '"' '{print $2}')

if [ "$ID1" == "$ID2" ]
then
   echo "OK"
else
   echo "different IDs: <$ID1> and <$ID2>"
fi

--REGEXPECT--
HTTP/1.1 200 OK
Content-Length: 151
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<orionError>
  <code>400</code>
  <reasonPhrase>bad request</reasonPhrase>
  <details>service '/NGSI10/queryContext' not found</details>
</orionError>
1: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 141
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<registerContextResponse>
  <duration>PT1H</duration>
  <registrationId>REGEX([0-9a-f]{24})</registrationId>
</registerContextResponse>
2: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 515
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<discoverContextAvailabilityResponse>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="" isPattern="false">
            <id>ConferenceRoom</id>
          </entityId>
        </entityIdList>
        <providingApplication>http://localhost:1028/application</providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</discoverContextAvailabilityResponse>
3: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 515
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<discoverContextAvailabilityResponse>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="" isPattern="false">
            <id>ConferenceRoom</id>
          </entityId>
        </entityIdList>
        <providingApplication>http://localhost:1028/application</providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</discoverContextAvailabilityResponse>
4: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 141
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<registerContextResponse>
  <duration>PT9H</duration>
  <registrationId>REGEX([0-9a-f]{24})</registrationId>
</registerContextResponse>
5: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 500
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<discoverContextAvailabilityResponse>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="" isPattern="false">
            <id>MyCar</id>
          </entityId>
        </entityIdList>
        <providingApplication>http://localhost:1028/mycar</providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</discoverContextAvailabilityResponse>
6: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 500
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<discoverContextAvailabilityResponse>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="" isPattern="false">
            <id>MyCar</id>
          </entityId>
        </entityIdList>
        <providingApplication>http://localhost:1028/mycar</providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</discoverContextAvailabilityResponse>
7: ++++++++++++++++++++
1
1
OK
--TEARDOWN--
kill $(cat ${BROKER_PID_FILE})
rm /tmp/orion_${BROKER_PORT}.pid
kill $(cat ${BROKER_PID_FILE_AUX})
rm /tmp/orion_${CM_PORT}.pid
