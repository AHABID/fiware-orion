# Copyright 2013 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# fermin at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Cross request payload error in XML
--SHELL-INIT--
# Test to see if we have a broker running on ${BROKER_PORT} if so kill it!
running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
if [ $running_broker -ne 0 ]; then
  kill $(ps -fe | grep contextBroker | grep ${BROKER_PORT} | awk '{print $2}')
  # Wait some time so the broker can finish properly
  sleep 1
  running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
  if [ $running_broker -ne 0 ]; then
    # If the broker refuses to stop politely, kill the process by brute force
    kill -9 $(ps -fe | grep contextBroker | grep ${BROKER_PORT} | awk '{print $2}')
    sleep 1
    running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
    if [ $running_broker -ne 0 ]; then
      echo "Existing contextBroker is inmortal, can not be killed!"
      exit 1
    fi
  fi
fi

echo 'db.dropDatabase()' | mongo ${BROKER_DATABASE_NAME} --quiet
CB_START_CMD="contextBroker -harakiri -port ${BROKER_PORT} -pidpath ${BROKER_PID_FILE} -db ${BROKER_DATABASE_NAME} -t 0-255"
if [ "$VALGRIND" == "" ]; then
  $CB_START_CMD
  # Wait some time so that the contextBroker is able to do its initial steps (reset database, start HTTP server, etc.)
  sleep 1
else
  valgrind $CB_START_CMD > ${TEST_BASENAME}.valgrind.out 2>&1 &
  # Waiting for valgrind to start (sleep 10)
  sleep 10s
fi

# Test to see if we have a broker running on ${BROKER_PORT} if not raise an error
running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
if [ $running_broker -ne 1 ]; then
  echo "Unable to start contextBroker"
  exit 1
fi

--SHELL--
(curl localhost:${BROKER_PORT}/NGSI9/registerContext -s -S --header 'Content-Type: application/xml' -d @- | xmllint --format - ) <<EOF
<?xml version="1.0"?>
<discoverContextAvailabilityRequest/>
EOF
echo "1: ++++++++++++++++++++"

(curl localhost:${BROKER_PORT}/NGSI9/discoverContextAvailability -s -S --header 'Content-Type: application/xml' -d @- | xmllint --format - ) <<EOF
<?xml version="1.0"?>
<registerContextRequest/>
EOF
echo "2: ++++++++++++++++++++"

(curl localhost:${BROKER_PORT}/NGSI9/subscribeContextAvailability -s -S --header 'Content-Type: application/xml' -d @- | xmllint --format -) <<EOF
<?xml version="1.0"?>
<registerContextRequest/>
EOF
echo "3: ++++++++++++++++++++"

(curl localhost:${BROKER_PORT}/NGSI9/updateContextAvailabilitySubscription -s -S --header 'Content-Type: application/xml' -d @- | xmllint --format - ) <<EOF
<?xml version="1.0"?>
<registerContextRequest/>
EOF
echo "4: ++++++++++++++++++++"

(curl localhost:${BROKER_PORT}/NGSI9/unsubscribeContextAvailability -s -S --header 'Content-Type: application/xml' -d @- | xmllint --format - ) <<EOF
<?xml version="1.0"?>
<registerContextRequest/>
EOF
echo "5: ++++++++++++++++++++"

(curl localhost:${BROKER_PORT}/NGSI10/queryContext -s -S --header 'Content-Type: application/xml' -d @- | xmllint --format -) <<EOF
<?xml version="1.0"?>
<registerContextRequest/>
EOF
echo "6: ++++++++++++++++++++"

(curl localhost:${BROKER_PORT}/NGSI10/updateContext -s -S --header 'Content-Type: application/xml' -d @- | xmllint --format - ) <<EOF
<?xml version="1.0"?>
<registerContextRequest/>
EOF
echo "7: ++++++++++++++++++++"

(curl localhost:${BROKER_PORT}/NGSI10/subscribeContext -s -S --header 'Content-Type: application/xml' -d @- | xmllint --format -) <<EOF
<?xml version="1.0"?>
<registerContextRequest/>
EOF
echo "8: ++++++++++++++++++++"

(curl localhost:${BROKER_PORT}/NGSI10/updateContextSubscription -s -S --header 'Content-Type: application/xml' -d @- | xmllint --format - ) <<EOF
<?xml version="1.0"?>
<registerContextRequest/>
EOF
echo "9: ++++++++++++++++++++"

(curl localhost:${BROKER_PORT}/NGSI10/unsubscribeContext -s -S --header 'Content-Type: application/xml' -d @- | xmllint --format - ) <<EOF
<?xml version="1.0"?>
<registerContextRequest/>
EOF
echo "10: ++++++++++++++++++++"

(curl localhost:${BROKER_PORT}/NGSI9/notSupportedRequest -s -S --header 'Content-Type: application/xml' -d @- | xmllint --format - ) <<EOF
<?xml version="1.0"?>
  <registerContextRequest/>
EOF
echo "11: ++++++++++++++++++++"

(curl localhost:${BROKER_PORT}/NGSI10/notSupportedRequest -s -S --header 'Content-Type: application/xml' -d @- | xmllint --format - ) <<EOF
<?xml version="1.0"?>
  <registerContextRequest/>
EOF
echo "12: ++++++++++++++++++++"

(curl localhost:${BROKER_PORT}/notSupportedRequest -s -S --header 'Content-Type: application/xml' -d @- | xmllint --format - ) <<EOF
<?xml version="1.0"?>
  <registerContextRequest/>
EOF
echo "13: ++++++++++++++++++++"

--EXPECT--
<?xml version="1.0"?>
<registerContextResponse>
  <registrationId>0</registrationId>
  <errorCode>
    <code>400</code>
    <reasonPhrase>Invalid payload</reasonPhrase>
    <details>Expected 'registerContextRequest' payload, got 'discoverContextAvailabilityRequest'</details>
  </errorCode>
</registerContextResponse>
1: ++++++++++++++++++++
<?xml version="1.0"?>
<discoverContextAvailabilityResponse>
  <errorCode>
    <code>400</code>
    <reasonPhrase>Invalid payload</reasonPhrase>
    <details>Expected 'discoverContextAvailabilityRequest' payload, got 'registerContextRequest'</details>
  </errorCode>
</discoverContextAvailabilityResponse>
2: ++++++++++++++++++++
<?xml version="1.0"?>
<subscribeContextAvailabilityResponse>
  <subscriptionId>0</subscriptionId>
  <errorCode>
    <code>400</code>
    <reasonPhrase>Invalid payload</reasonPhrase>
    <details>Expected 'subscribeContextAvailabilityRequest' payload, got 'registerContextRequest'</details>
  </errorCode>
</subscribeContextAvailabilityResponse>
3: ++++++++++++++++++++
<?xml version="1.0"?>
<updateContextAvailabilitySubscriptionResponse>
  <subscriptionId>000000000000000000000000</subscriptionId>
  <errorCode>
    <code>400</code>
    <reasonPhrase>Invalid payload</reasonPhrase>
    <details>Expected 'updateContextAvailabilitySubscriptionRequest' payload, got 'registerContextRequest'</details>
  </errorCode>
</updateContextAvailabilitySubscriptionResponse>
4: ++++++++++++++++++++
<?xml version="1.0"?>
<unsubscribeContextAvailabilityResponse>
  <subscriptionId>000000000000000000000000</subscriptionId>
  <statusCode>
    <code>400</code>
    <reasonPhrase>Invalid payload</reasonPhrase>
    <details>Expected 'unsubscribeContextAvailabilityRequest' payload, got 'registerContextRequest'</details>
  </statusCode>
</unsubscribeContextAvailabilityResponse>
5: ++++++++++++++++++++
<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>400</code>
    <reasonPhrase>Invalid payload</reasonPhrase>
    <details>Expected 'queryContextRequest' payload, got 'registerContextRequest'</details>
  </errorCode>
</queryContextResponse>
6: ++++++++++++++++++++
<?xml version="1.0"?>
<updateContextResponse>
  <errorCode>
    <code>400</code>
    <reasonPhrase>Invalid payload</reasonPhrase>
    <details>Expected 'updateContextRequest' payload, got 'registerContextRequest'</details>
  </errorCode>
</updateContextResponse>
7: ++++++++++++++++++++
<?xml version="1.0"?>
<subscribeContextResponse>
  <subscribeError>
    <errorCode>
      <code>400</code>
      <reasonPhrase>Invalid payload</reasonPhrase>
      <details>Expected 'subscribeContextRequest' payload, got 'registerContextRequest'</details>
    </errorCode>
  </subscribeError>
</subscribeContextResponse>
8: ++++++++++++++++++++
<?xml version="1.0"?>
<updateContextSubscriptionResponse>
  <subscribeError>
    <subscriptionId>0</subscriptionId>
    <errorCode>
      <code>400</code>
      <reasonPhrase>Invalid payload</reasonPhrase>
      <details>Expected 'updateContextSubscriptionRequest' payload, got 'registerContextRequest'</details>
    </errorCode>
  </subscribeError>
</updateContextSubscriptionResponse>
9: ++++++++++++++++++++
<?xml version="1.0"?>
<unsubscribeContextResponse>
  <subscriptionId>0</subscriptionId>
  <statusCode>
    <code>400</code>
    <reasonPhrase>Invalid payload</reasonPhrase>
    <details>Expected 'unsubscribeContextRequest' payload, got 'registerContextRequest'</details>
  </statusCode>
</unsubscribeContextResponse>
10: ++++++++++++++++++++
<?xml version="1.0"?>
<orionError>
  <code>400</code>
  <reasonPhrase>bad ngsi9 request</reasonPhrase>
  <details>ngsi9 service '/NGSI9/notSupportedRequest' not found</details>
</orionError>
11: ++++++++++++++++++++
<?xml version="1.0"?>
<orionError>
  <code>400</code>
  <reasonPhrase>bad ngsi10 request</reasonPhrase>
  <details>ngsi10 service '/NGSI10/notSupportedRequest' not found</details>
</orionError>
12: ++++++++++++++++++++
<?xml version="1.0"?>
<orionError>
  <code>400</code>
  <reasonPhrase>bad request</reasonPhrase>
  <details>service '/notSupportedRequest' not found</details>
</orionError>
13: ++++++++++++++++++++
--TEARDOWN--
if [ "$VALGRIND" == "" ]; then
  kill $(cat ${BROKER_PID_FILE})
  rm /tmp/orion_${BROKER_PORT}.pid
else
  curl localhost:${BROKER_PORT}/exit/harakiri >> ${TEST_BASENAME}.valgrind.stop.out
  # Waiting for valgrind to terminate (sleep 10)
  sleep 10
fi
