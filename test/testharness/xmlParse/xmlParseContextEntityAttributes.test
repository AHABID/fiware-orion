# Copyright 2013 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# fermin at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
XML Parse ContextEntityAttributes
--SHELL-INIT--
# Test to see if we have a broker running on ${BROKER_PORT} if so kill it!
running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
if [ $running_broker -ne 0 ]; then
  kill $(ps -fe | grep contextBroker | grep ${BROKER_PORT} | awk '{print $2}')
  # Wait some time so the broker can finish properly
  sleep 1
  running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
  if [ $running_broker -ne 0 ]; then
    # If the broker refuses to stop politely, kill the process by brute force
    kill -9 $(ps -fe | grep contextBroker | grep ${BROKER_PORT} | awk '{print $2}')
    sleep 1
    running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
    if [ $running_broker -ne 0 ]; then
      echo "Existing contextBroker is inmortal, can not be killed!"
      exit 1
    fi
  fi
fi

echo 'db.dropDatabase()' | mongo ${BROKER_DATABASE_NAME} --quiet
CB_START_CMD="contextBroker -harakiri -port ${BROKER_PORT} -pidpath ${BROKER_PID_FILE} -db ${BROKER_DATABASE_NAME} -t 0-255"
if [ "$VALGRIND" == "" ]; then
  $CB_START_CMD
  # Wait some time so that the contextBroker is able to do its initial steps (reset database, start HTTP server, etc.)
  sleep 1
else
  valgrind $CB_START_CMD > ${TEST_BASENAME}.valgrind.out 2>&1 &
  # Waiting for valgrind to start (sleep 10)
  sleep 10s
fi

# Test to see if we have a broker running on ${BROKER_PORT} if not raise an error
running_broker=$(ps -fe | grep contextBroker | grep ${BROKER_PORT} | wc -l)
if [ $running_broker -ne 1 ]; then
  echo "Unable to start contextBroker"
  exit 1
fi

--SHELL--
print_headers () {
  cat headers.out
  echo $response | xmllint --format -
}
echo "1: ++++++++++++++++++++"
# Make a registration using conv op /NGSI9/contextEntities/ENTITY_ID/attributes
response=$((curl localhost:${BROKER_PORT}/NGSI9/contextEntities/ENTITY_ID/attributes -s -S --dump-header headers.out --header 'Content-Type: application/xml' --header 'Accept: application/xml' -d @- | xmllint --format -) << EOF
<?xml version="1.0" encoding="UTF-8"?>
<registerProviderRequest>
  <metadata>
    <contextMetadata>
      <name>ID</name>
      <type>string</type>
      <value>1110</value>
    </contextMetadata>
    <contextMetadata>
      <name>cm2</name>
      <type>string</type>
      <value>XXX</value>
    </contextMetadata>
  </metadata>
  <duration>PT1H</duration>
  <providingApplication>http://kz.tid.es/abc</providingApplication>
</registerProviderRequest>
EOF)
REG_ID=$(echo "$response" | grep registrationId | awk -F '>' '{print $2}' | awk -F '<' '{print $1}' | grep -v '^$' )
print_headers


# Make a discovery to see that the registration went OK
echo "2: ++++++++++++++++++++"
response=$((curl localhost:${BROKER_PORT}/NGSI9/discoverContextAvailability -s -S --dump-header headers.out --header 'Content-Type: application/xml' -d @- | xmllint --format - ) <<EOF
<?xml version="1.0"?>
  <discoverContextAvailabilityRequest>
    <entityIdList>
      <entityId type="" isPattern="true">
        <id>ENTITY_ID</id>
      </entityId>
    </entityIdList>
  </discoverContextAvailabilityRequest>
EOF)
print_headers

# Modify the first registration
echo "3: ++++++++++++++++++++"
response=$((curl localhost:${BROKER_PORT}/NGSI9/contextEntities/ENTITY_ID/attributes -s -S --dump-header headers.out --header 'Content-Type: application/xml' --header 'Accept: application/xml' -d @- | xmllint --format -) << EOF
<?xml version="1.0" encoding="UTF-8"?>
<registerProviderRequest>
  <metadata>
    <contextMetadata>
      <name>ID</name>
      <type>string</type>
      <value>1111</value>
    </contextMetadata>
    <contextMetadata>
      <name>cm2</name>
      <type>string</type>
      <value>YYY</value>
    </contextMetadata>
  </metadata>
  <duration>PT2H</duration>
  <providingApplication>http://kz.tid.es/abc2</providingApplication>
  <registrationId>$REG_ID</registrationId>
</registerProviderRequest>
EOF)
print_headers
echo "4: ++++++++++++++++++++"

# Now discover that very registration again to see the change
response=$((curl localhost:${BROKER_PORT}/NGSI9/discoverContextAvailability -s -S --dump-header headers.out --header 'Content-Type: application/xml' -d @- | xmllint --format - ) <<EOF
<?xml version="1.0"?>
  <discoverContextAvailabilityRequest>
    <entityIdList>
      <entityId type="" isPattern="true">
        <id>ENTITY_ID</id>
      </entityId>
    </entityIdList>
  </discoverContextAvailabilityRequest>
EOF)
print_headers
echo "5: ++++++++++++++++++++"

# Now try the GET method
response=$(curl localhost:${BROKER_PORT}/NGSI9/contextEntities/ENTITY_ID/attributes -s -S --dump-header headers.out | xmllint --format -)
print_headers
echo "6: ++++++++++++++++++++"

# And a GET that fails
response=$(curl localhost:${BROKER_PORT}/NGSI9/contextEntities/ENTITY_ID2/attributes -s -S --dump-header headers.out | xmllint --format -)
print_headers
echo "7: ++++++++++++++++++++"

# DELETE and PUT should give errors
response=$(curl localhost:${BROKER_PORT}/NGSI9/contextEntities/ENTITY_ID/attributes -s -S --dump-header headers.out -X DELETE --include)
print_headers
echo "8: ++++++++++++++++++++"

response=$((curl localhost:${BROKER_PORT}/NGSI9/contextEntities/ENTITY_ID/attributes -s -S --dump-header headers.out -X PUT --include --header 'Content-Type: application/xml' -d @-) << EOF
<?xml version="1.0" encoding="UTF-8"?>
<registerProviderRequest>
  <metadata>
    <contextMetadata>
      <name>ID</name>
      <type>string</type>
      <value>1111</value>
    </contextMetadata>
    <contextMetadata>
      <name>cm2</name>
      <type>string</type>
      <value>YYY</value>
    </contextMetadata>
  </metadata>
  <duration>PT2H</duration>
  <providingApplication>http://kz.tid.es/abc2</providingApplication>
</registerProviderRequest>
EOF)
print_headers
echo "9: ++++++++++++++++++++"

--REGEXPECT--
1: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 141
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<registerContextResponse>
  <duration>PT1H</duration>
  <registrationId>REGEX([0-9a-f]{24})</registrationId>
</registerContextResponse>
2: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 497
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<discoverContextAvailabilityResponse>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="" isPattern="false">
            <id>ENTITY_ID</id>
          </entityId>
        </entityIdList>
        <providingApplication>http://kz.tid.es/abc</providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</discoverContextAvailabilityResponse>
3: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 141
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<registerContextResponse>
  <duration>PT2H</duration>
  <registrationId>REGEX([0-9a-f]{24})</registrationId>
</registerContextResponse>
4: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 498
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<discoverContextAvailabilityResponse>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="" isPattern="false">
            <id>ENTITY_ID</id>
          </entityId>
        </entityIdList>
        <providingApplication>http://kz.tid.es/abc2</providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</discoverContextAvailabilityResponse>
5: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 498
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<discoverContextAvailabilityResponse>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="" isPattern="false">
            <id>ENTITY_ID</id>
          </entityId>
        </entityIdList>
        <providingApplication>http://kz.tid.es/abc2</providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</discoverContextAvailabilityResponse>
6: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 199
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<discoverContextAvailabilityResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element registrations found</reasonPhrase>
  </errorCode>
</discoverContextAvailabilityResponse>
7: ++++++++++++++++++++
HTTP/1.1 405 Method Not Allowed
Content-Length: 0
Allow: POST, GET
Date: REGEX(.*)

8: ++++++++++++++++++++
HTTP/1.1 405 Method Not Allowed
Content-Length: 0
Allow: POST, GET
Date: REGEX(.*)

9: ++++++++++++++++++++
--TEARDOWN--
if [ "$VALGRIND" == "" ]; then
  kill $(cat ${BROKER_PID_FILE})
  rm /tmp/orion_${BROKER_PORT}.pid
else
  curl localhost:${BROKER_PORT}/exit/harakiri >> ${TEST_BASENAME}.valgrind.stop.out
  # Waiting for valgrind to terminate (sleep 10)
  sleep 10
fi
