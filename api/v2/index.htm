<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>fiware-ngsiv2-reference</title>
</head>
<body>
  <script src="https://api.apiary.io/seeds/embed.js"></script>
  <script>
    var embed = new Apiary.Embed({
      apiBlueprint: "FORMAT: 1A\nHOST: http://orion.lab.fiware.org/\n\n# FIWARE-NGSI-Simple\n\nFIWARE-NGSI Simple API (v2) Specification.\n\nThis is a work in progress and is changing on a daily basis.\nPlease send your comments to fiware-ngsi@lists.fiware.org. You can\ntrace the discussions checking the archives of the mailing list:\nhttps://lists.fiware.org/private/fiware-ngsi/ (list subscription\nrequired).\n\nIn addition, note that a list of currently open discussions is available at\n\n* https://github.com/telefonicaid/fiware-orion/issues/1022\n* https://github.com/telefonicaid/fiware-orion/issues/1034\n* https://github.com/telefonicaid/fiware-orion/issues/1035\n\nThis specification is licensed under the\n[FIWARE Open Specification License]\n(http://forge.fiware.org/plugins/mediawiki/wiki/fiware/index.php/FI-WARE_Open_Specification_Legal_Notice_%28essential_patents_license%29).\n\n## FIWARE NGSI information and data model introduction\n\nThe FIWARE NGSI (Next Generation Service Interface) API defines \n\n* a **data model** for context information, based on a simple information model using the notion of *context entities*\n* a **context data interface** for exchanging information by means of query, subscription, and update operations\n* a **context availability interface** for exchanging information on how to obtain context information\n(whether to separate the two interfaces is currently under discussion).\n* a set of typical **roles** played by NGSI-compliant components\n\n### Context data modelling and exchange\n\n#### Context Entities\n\nContext entities, or simply called entities, are the center of gravity\nin the FIWARE NGSI information model. An entity represents a\nreal-world object like e.g. a sensor, a person, or a room. Each entity\nis uniquely identified by its **entity id**. \n\nFurthermore, the type system of FIWARE NGSI enables entities to have \nan **entity type**. Entity types are semantic types; they are intended\nto describe the type of real-world object represented by the entity.\nFor example, a context entity with id *sensor-365* could have the\ntype *temperatureSensor*.\n\n#### Context Elements\n\n*(Note: the distinction between context entities and context elements \nis still under discussion; therefore the notion of context elements\ncurrently only appears in this section.)*\n\nA context element is a data object (e.g. JSON object; see the section\non JSON representation below) which contains information about a\nspecific context entity. Consequently, a context element has a\nmandatory property `id` in order to identify the context entity it\nrefers to. It furthermore can contain an optional property `type`\nto describe the type of the entity. Further properties can be used\nto represent more information about the entity (see the **context\nattributes** section below).\n\nIt is important to understand that the relationship of entity and context element is one-to-many. This means that \n* each context element refers to exactly one entity\n* there can be several context elements  referring to the same entity. The context elements can for example contain different pieces of information about the entity\n\n#### Context Attributes \n\nContext attributes are properties of context entities.\nFor example, the current speed of a car could be modeled as\nattribute *current_speed* of entity *car-104*.\n\nIn the NGSI data model, attributes have an *attribute name*,\nan *attribute type*, an *attribute value* and *metadata*. \n * The attribute name describes which kind of property of the entity the attribute value represents, for example *current_speed*.\n * The attribute type represents the NGSI value type of the attribute value. Note that FIWARE NGSI has its own type system for attribute values, so NGSI value types are not the same as JSON types.\n * The attribute value finally contains\n  * the actual data\n  * optional **metadata** describing properties of the attribute value like e.g. accuracy, provider, or a timestamp\n  \n#### Context Metadata\n\nContext metadata is used in FIWARE NGSI at several places, one of\nthem being an optional part of the attribute value as described\nabove. Similarly to attributes, each piece of metadata has \n * **a metadata name**, describing the role of the metadata at the\n place where it occurs; for example, the metadata name *accuracy* \n indicates that the metadata value describes how accurate a given \n attribute value is\n * a **metadata type**, describing the NGSI value type of the metadata value\n * a **metadata value** containing the actual metadata\n\nNote that in NGSI it is not forseen that metadata values can\nthemselves have metadata.\n\n#### Restrictions and Operation Scopes\n\n(placeholder to describe restrictions and operation scopes)\n\n#### Context Queries\n\n(placeholder for describing what a context query is, and some hints on how this\nis typically done in the REST interface)\n\n#### Context Subscriptions\n\n(placeholder for describing the concept of context subscriptions)\n\n#### Context Updates\n\n(placeholder for describing updates)\n\n### Exchanging Context Availability Information\n\n(placeholder on some introduction of what context availability information is)\n\n#### Context Registrations\n\n(placeholder for describing what a context registration is and what it is used for)\n\n#### Context Discovery\n\n(placehoder for describing what discovery does)\n\n#### Context Availability Subscription\n\n(placeholder for describing context availability subscriptions)\n\n#### Registering Context Availability Information\n\n(placeholder for describing the operation of registering context)\n\n### Roles of FIWARE NGSI components\n\n(placeholder to describe roles like context provider, context producer,\ncontext broker, context registry, context consumer)\n\n## JSON entity representation\n\nAn entity is represented by a a JSON object which contain the following properties:\n\n* `id` for the entity ID, represented by a JSON string. If the entity has an `id` attribute itself it will be ignored.\n* `type` for the entity type, represented by a JSON string. If the entity has a `type` attribute itself it will be ignored.\n  If the entity doesn\'t have a type, then this property is not included.\n* A collection of properties, one per entity attribute. Properties representing attributes with no metadata\n  or type are rendered as regular JSON values. Properties representing attributes which specify a type or include\n  metadata are rendered as JSON objects with the following properties:\n  * `value`: for the attribute value, rendered as a regular JSON value (string, number or boolean), object or array.\n  * `type`: a JSON string which represents the user-defined NGSI attribute type.\n  * A collection of properties one per metadata field associated to the attribute value. Metadata properties follow\n    the same representation rules that applies to properties which represent attributes (except that a metadata\n    cannot have metadata properties).\n\n### Special attribute types\n\nGenerally speaking, user-defined attribute types are informative, they are processed by the NGSIv2 server in\nan opaque way. Nonetheless, the types described below are used to convey an special meaning\n\n* `date`:  identifies dates, in ISO8601 format. These attributes can be used with the\n  greater than, lesser than, greater or equal, lesser or equal and range query operators. Eg:\n\n```\n  \"timestamp\": {\n    \"value\": \"2017-06-17T07:21:24.238Z\",\n    \"type: \"date\"\n  }\n```\n\n* `geo:point`: identifies the location of the entity in geo-location queries. If an entity have several attributes\n  of this type all them define a possible location for the entity from a geo-location query point of view. (TBD:\n  check feasibility).\n\n```\n  \"location\": {\n    \"value\": \"41.3763726, 2.1864475,14\",\n    \"type\": \"geo:point\"\n  }\n```\n\n### Canonical format description\n\nThis is a variant of the represention format aimed at clients that need a regular representation of the entities\nand attributes, that can be used in the operations that support the `canonical` option.\n\n* Entity `type` is mandatory. If the entity has no type, JSON `null` is used.\n* Property `attrs` is mandatory and includes a JSON object for the attributes.\n* Each attribute is described always with `value`, `type` and `metadata`. All fields are mandatory (attributes\n  without type use JSON `null` for that property).\n* Each metadata is described always with `value` and `type`. Both fields are mandatory (metadata\n  without type use JSON `null` for that property).\n\n```\n{\n  \"type\": \"Room\",\n  \"id\": \"Boe_Idearium\",\n  \"attrs\": {\n    \"speed\": {\n      \"value\": 88,\n      \"type\": null,\n      \"metadata\": { }\n    },\n    \"pressure\": {\n      \"value\": 12.1,\n      \"type\": null,\n      \"metadata\": { }\n    },\n    \"temperature\": {\n      \"value\": 22,\n      \"type\": \"urn:phenomenum:temperature\",\n      \"metadata\": { }\n    },\n    \"colour\": {\n      \"value\": \"black\",\n      \"type\": \"myString\",\n      \"metadata\": { }\n    }\n  }\n}\n```\n\n## Error responses\n\nIn the case of being present, the error payload is JSON object including the following fields:\n\n* `error` (mandatory): a textual description of the error.\n* `description` (optional): additional information about the error.\n* `affectedItems` (optional): a list of elements affected by the error. Depending on the operation, it may\n  refer to entities, registrations or subscriptions.\n\nError list (HTTP response code in paranthesis):\n\n* ParseError (400). The incoming JSON payload is incorrect.\n* BadRequest (400). The incoming request is somehow invalid.\n* NotFound (404). The context element referred in the request has not been found.\n* TooManyResults (409). There are several results that match with the resource identification used\n  in the request. This typically the case of requesting an entity with not enough information and the\n  solution is to enhance entity identification adding more information, e.g. adding entity type\n  and/or service path.\n* LengthRequired (411). Zero/No Content-Length in PUT/POST/PATCH request\n* RequestEntityTooLarge (413). Payload too large\n* UnsupportedMediaType (415). Request content type is not supported.\n\n\n# Group NGSIv2\n\n## API Entry Point [/v2]\n\n### Retrieve Entry Points [GET /v2]\n\nThis resource does not have any attributes. Instead it offers the initial\nAPI affordances in the form of the links in the JSON body.\n\nIt is recommended to follow the “url” link values,\n[Link](https://tools.ietf.org/html/rfc5988) or Location headers where\napplicable to retrieve resources. Instead of constructing your own URLs,\nto keep your client decoupled from implementation details.\n\n+ Response 200 (application/json)\n\n        {\n            \"entities_url\":      \"/v2/entities\",\n            \"types_url\":         \"/v2/types\",\n            \"subscriptions_url\": \"/v2/subscriptions\",\n            \"registrations_url\": \"/v2/registrations\"\n        }\n\n## Entities [/v2/entities{?limit,offset,options,type,id,idPattern,q,geometry,coords,attrs}]\n\n### List entities [GET /v2/entities{?limit,offset,options,type,id,idPattern,q,geometry,coords,attrs}]\n\nRetrieves a list of entities which match criteria defined by the following parameters: `id`, `type`, `idPattern`, `q`,\n`geometry` and `coords` attribute (see below for a detailed description of these parameters). A given entity\nhave to match all the criteria to be retrieved (i.e. criteria are combined in a logical AND way).\n\n<table style=\"width: 100%; margin: 12px 0 0 0;\">\n<tr><td colspan=\"2\"><strong>Required Parameters<\/strong><\/td><\/tr>\n<tr><td colspan=\"2\">none<\/td><\/tr>\n<tr><td colspan=\"2\"><strong>Optional Parameters<\/strong><\/td><\/tr>\n<tr>\n  <td style=\"padding-right: 40px; width: 140px;\">id<\/td><td>A comma separated list of elements.\n  Retrieve entities which ID match one of the elements in the list.<\/td>\n<\/tr>\n<tr>\n  <td style=\"padding-right: 40px; width: 140px;\">type<\/td><td>A comma separated list of elements.\n  Retrieve entities which type match one of the elements in the list.<\/td>\n<\/tr>\n<tr>\n  <td style=\"padding-right: 40px; width: 140px;\">idPattern<\/td><td>A correctly formated regular\n  expression. Retrieve entities which ID matches the regular expression.<\/td>\n<\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">q<\/td><td>\n\n<p>A query expression, composed of a list of statements separated by <code>;<\/code>, i.e.<\/p>\n\n<p><code>\nq=statement;statements;statement\n<\/code><\/p>\n\n<p>Each statement express a matching condition. The result of the query is the match on each one of the statements, e.g. a\nAND logical condition among the different statements. There are two kind of statements: <em>unary statements<\/em> and\n<em>binary staments<\/em>.<\/p>\n\n<p>Binary statements are composed by an attribute name (e.g. \"temperature\"), operator and value (which format\ndepends on the operator), e.g.:<\/p>\n\n<p><code>\ntemperature==50<br/>\ntemperature<=20\n<\/code><\/p>\n\n<p>The list of operators (and the format of the values they use) is as follows:<\/p>\n\n<ul>\n  <li>Equal: <code>==<\/code>. It accepts the following values:\n    <ul>\n      <li>Single element, e.g. <code>temperature==40<\/code>. It matches entities whose attribute value\n      that exact value.<\/li>\n      <li>A list of comma-separated values, e.g. <code>color==black,red<\/code>. It matches entities whose\n      attribute value is one of the values (OR clause). Eg. entities which <code>color<\/code> is set to\n      <code>black<\/code> will match, while entities which <code>color<\/code> is set to <code>white<\/code>\n      will not match.<\/li>\n      <li>A range, specified as a minimum and maximum separated by <code>..<\/code>. It match if\n      the value is in the interval between the minimum and the maximum (both included). It can only be used\n      with attributes which contain dates or numbers. E.g. <code>temperature==10..20<\/code> matchs if the\n      temperature is greater or equal than 10 and lower or equal than 20.<\/li>\n    <\/ul>\n  <\/li>\n  <li>Unequal: <code>!=<\/code>. It accepts the following values:\n    <ul>\n      <li>The value is a single element, e.g. <code>temperature!=40<\/code>. It matches entities whose attribute\n      value is not that exact value.<\/li>\n      <li>A list of comma-separated values, e.g. <code>color!=black,red<\/code>. It matches entities whose\n      attribute value is not any of the values (AND clause). Eg. entities whose <code>color<\/code> is set\n      to <code>black<\/code> will not match, while entities whose <code>color<\/code> is set to\n      <code>white<\/code> match.<\/li>\n      <li>A range, specified as a minimum and maximum separated by <code>..<\/code>. It match\n      if the value is not in the interval between the minimum and the maximum (both included). It can only\n      be used with attributes which contain dates or numbers. E.g. <code>temperature!=10..20<\/code>matchs if\n      the temperature is lower than 10 or greater than 20 (it will not match if the tempeature is 10 or the\n      temperature is 20).<\/li>\n    <\/ul>\n  <\/li>\n  <li>Greater than: <code>&gt;<\/code>. The value is a single element, e.g. <code>temperature&gt;40<\/code>. It\n  matches entities which attribute value is strictly greater than that value. It only makes sense when\n  used with attributes which contain dates or numbers (using with attributes of other type might lead to\n  unexpected results).<\/li>\n  <li>Lesser than: <code>&lt;<\/code>. The value is a single element, e.g. <code>temperature&lt;40<\/code>. It\n  matches entities which attribute value is strictly lesser than that value. It only makes sense when\n  used with attributes which contain dates or numbers (using with attributes of other type might lead to\n  unexpected results).<\/li>\n  <li>Greater or equal than: <code>&gt;=<\/code>. The value is a single element, e.g. <code>temperature&gt;=40<\/code>.\n  It matches entities which attribute value is greater than or equal to that value. It only makes sense when\n  used with attributes which contain dates or numbers (using with attributes of other type might lead to\n  unexpected results).<\/li>\n  <li>Lesser or equal than: <code>&lt;=<\/code>. The value is a single element, e.g. <code>temperature&lt;=40<\/code>. It\n  matches entities which attribute value is lesser than or equal to that value. It only makes sense when\n  used with attributes which contain dates or numbers (using with attributes of other type might lead to\n  unexpected results).<\/li>\n<\/ul>\n\n<p>In the case of equal or inequal, if the value to match include a <code>,<\/code>, you can use simple quote\n(<code>\'<\/code>), e.g: <code>color==\'light,green\',\'deep,blue\'<\/code>.<\/p>\n\n<p>Unary statements are composed of a unary operator (either <code>+<\/code>or <code>-<\/code>) and are used in two situations:<\/p>\n\n<ul>\n  <li>To check for attribute existence. E.g. <code>+temperature<\/code>matches entities which have\n  a temperature attribute (no matter its value), while <code>-temperature<\/code>matches entities which don\'t have\n  a temperature attribute.<\/li>\n  <li>To check for entity type existence, with the <code>type<\/code>keyword. E.g, <code>-type<\/code>\n  matches entities which don\'t have a type.<\/li>\n<\/ul>\n\n<\/td><\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">geometry<\/td><td>\n\n<p>Defines a geografical area so only the entities located in that area matches the query. It is composed of a tokens list\nseparated by <code>;<\/code>. The first token is the shape of the geometry, the rest of the tokens (if any) depends\non the shape. In particular, the following geometries can be defined so far:<\/p>\n\n<ul>\n  <li><code>geometry=circle;radius:4000<\/code>, inside a circle (radius is in meters).<\/li>\n  <li><code>geometry=circle;radius:4000;external<\/code>, outside a circle (radius is in meters).<\/li>\n  <li><code>geometry=polygon<\/code>, inside a polygon.<\/li>\n  <li><code>geometry=polygon;external<\/code>, outside a polygon.<\/li>\n<\/ul>\n\n<\/td><\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">coords<\/td><td>\n\n<p>List of coordinates (separated by <code>;<\/code>) are interpreted depending on the geometry parameter as follows:<\/p>\n\n<ul>\n  <li>In the case of <code>circle<\/code>geometry, the parameter includes just one element, which\n  is the center of the circle.<\/li>\n  <li>In the case of <code>polygon<\/code>includes a list of elements, which are the vertices of\n  the polygon.<\/li>\n<\/ul>\n\n<\/td><\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">attrs<\/td>\n    <td>Comma-separated list of attribute names which data will be included in the response. If this parameter is not\n    included, all the attributes are retrieved.<\/td>\n<\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">limit<\/td><td>Limit the number of entities to be retrieved<\/td><\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">offset<\/td><td>Skip a number of records<\/td><\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">options<\/td><td>\nThis operation supports two options:\n\n<ul>\n  <li><code>count<\/code>: when used, the total number of entities is returned in the response as a HTTP header named <code>X-Total-Count<\/code>.<\/li>\n  <li><code>canonical<\/code>: when used, the response payload uses the \"canonical form\". See JSON entity representation format section\n  for details.<\/li>\n<\/td><\/tr>\n<\/table>\n\nThe response payload is an Array which contains one object per matching entity. Each entity follows\nthe JSON entity representation format (described in a section above).\n\nResponse code:\n\n* Successful operation uses 200 OK\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + limit: 20 (optional, number)\n    + offset: 20 (optional, number)\n    + type: Room (optional, string)\n    + id: Bcn_Welt (optional, string)\n    + idPattern: (optional, string)\n\n+ Response 200 (application/json)\n\n        [\n         {\n            \"type\": \"Room\",\n            \"id\": \"DC_S1-D41\",\n            \"temperature\": 35.6\n         },\n         {\n            \"type\": \"Room\",\n            \"id\": \"Boe-Idearium\",\n            \"temperature\": 22.5\n         },\n         {\n            \"type\": \"Car\",\n            \"id\": \"P-9873-K\",\n            \"speed\": {\n                \"value\": 100,\n                \"type\": \"number\",\n                \"accuracy\": 2,\n                \"timestamp\": {\n                    \"value\": \"2015-06-04T07:20:27.378Z\",\n                    \"type\": \"date\"\n                }\n            }\n         }\n        ]\n\n### Create entity [POST /v2/entities]\n\nThe payload is an object representing the entity to be created. The object follows\nthe JSON entity representation format (described in a section above).\n\nResponse:\n\n* Successful operation uses 201 Created. Reponse includes a `Location` header with the URL of the\n  created entity.\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Request (application/json)\n\n        {\n            \"type\": \"Room\",\n            \"id\": \"Bcn-Welt\",\n            \"temperature\": 21.7,\n            \"humidity\": 60,\n            \"location\": {\n                \"value\":  \"41.3763726, 2.1864475\",\n                \"type\": \"geo:point\",\n                \"crs\": \"WGS84\"\n            }\n        }\n\n+ Response 201\n\n    + Headers\n\n            Location: /v2/entities/Bcn-Welt\n\n\n## Entity by ID [/v2/entities/{entityId}{?attrs,options}]\n\n### Retrieve entity [GET /v2/entities/{entityId}{?attrs}]\n\n<table style=\"width: 100%; margin: 12px 0 0 0;\">\n<tr><td colspan=\"2\"><strong>Required Parameters<\/strong><\/td><\/tr>\n<tr><td colspan=\"2\">none<\/td><\/tr>\n<tr><td colspan=\"2\"><strong>Optional Parameters<\/strong><\/td><\/tr>\n<tr>\n  <td style=\"padding-right: 40px; width: 140px;\">attrs<\/td>\n  <td>Comma-separated list of attribute names which data will be included in the response. If this parameter is not\n  included, all the attributes are retrieved.<\/td>\n<\/tr>\n<\/table>\n\nThe response is an object representing the entity identified by the ID. The object follows\nthe JSON entity representation format (described in a section above).\n\nThis operation must return only one entity element, but it may happen that there are more\nthan one entity with the same ID (e.g. entities with same ID but different type). In those cases\nan error mesage is returned, specifying in the description the URL that could be used to get\nthe list of conflicting entities, i.e. all the entities with such an ID.\n\nResponse:\n\n* Successful operation uses 200 OK\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity Id.\n    + attrs: temperature,humidity (optional, string) - Attributes to be retrieved. Coma separated list.\n\n+ Response 200 (application/json)\n\n        {\n            \"type\": \"Room\",\n            \"id\": \"Bcn_Welt\",\n            \"temperature\": 21.7,\n            \"humidity\": 60,\n            \"location\": {\n                \"value\":  \"41.3763726, 2.1864475\",\n                \"type\": \"geo:point\",\n                \"crs\": \"WGS84\"\n            }\n        }\n\n### Update or append entity attributes [POST /v2/entities/{entityId}?{options}]\n\n<table style=\"width: 100%; margin: 12px 0 0 0;\">\n<tr><td colspan=\"2\"><strong>Required Parameters<\/strong><\/td><\/tr>\n<tr><td colspan=\"2\">none<\/td><\/tr>\n<tr><td colspan=\"2\"><strong>Optional Parameters<\/strong><\/td><\/tr>\n<tr>\n  <td style=\"padding-right: 40px; width: 140px;\">op<\/td>\n  <td>Operation options. Allowed values: <code>append<\/code>.<\/td>\n<\/tr>\n<\/table>\n\nThe request payload is an object representing the attributes to append or update. The object follows\nthe JSON entity representation format (described in a section above), except that `id` and `type`\nare not allowed.\n\nThe entity attributes are updated with the ones in the payload. In particular, depending on\nwhether `append` option is used or not.\n\n* If `append` is not used: the entity attributes are updated (if they previously exist) or appended\n  (in they don\'t previously exists) with the ones in the payload.\n* If `append` is used (i.e. strict append semantics): all the attributes in the payload not previously\n  existing in the entity are appended. In addition to that, in the case some of the attributes in the\n  payload already exist in the entity, an error if returned.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + options: append (optional, string) - Strict append.\n\n+ Request (application/json)\n\n    + Body\n\n            {\n                \"ambientNoise\": 31.5\n            }\n\n+ Response 204\n\n### Update existing entity attributes [PATCH /v2/entities/{entityId}]\n\nThe request payload is an object representing the attributes to update. The object follows\nthe JSON entity representation format (described in a section above), except that `id` and `type`\nare not allowed.\n\nThe entity attributes are updated with the ones in the payload. In addition to that, if one or more\nattributes in the payload doesn\'t exist in the entity, an error if returned.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n\n+ Request (application/json)\n\n        {\n            \"temperature\": 25.5,\n            \"seatsNumber\": 6\n        }\n\n+ Response 204\n\n### Replace all entity attributes [PUT /v2/entities/{entityId}]\n\nThe request payload is an object representing the new entity attributes. The object follows\nthe JSON entity representation format (described in a section above), except that `id` and `type`\nare not allowed.\n\nThe attributes previously existing in the entity are removed and replaced by the ones in the\nrequest.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n\n+ Request (application/json)\n\n        {\n            \"temperature\": 25.5,\n            \"seatsNumber\": 6\n        }\n\n+ Response 204\n\n### Remove entity atributes [DELETE /v2/entities/{entityId}]\n\nDelete the entity.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId: Boe_Idearium (required, string) - Entity ID\n\n+ Response 204\n\n<!--\n\n## Entity by type and ID [/v2/entities/type/{entityType}/id/{entityId}{?attrs,options}]\n\n### Retrieve entity [GET /v2/entities/type/{entityType}/id/{entityId}?{attrs}]\n\n<table style=\"width: 100%; margin: 12px 0 0 0;\">\n<tr><td colspan=\"2\"><strong>Required Parameters<\/strong><\/td><\/tr>\n<tr><td colspan=\"2\">none<\/td><\/tr>\n<tr><td colspan=\"2\"><strong>Optional Parameters<\/strong><\/td><\/tr>\n<tr>\n  <td style=\"padding-right: 40px; width: 140px;\">attrs<\/td>\n  <td>Comma-separated list of attribute names which data will be included in the response. If this parameter is not\n  included, all the attributes are retrieved.<\/td>\n<\/tr>\n<\/table>\n\nThe response is an object representing the entity identified by the type and ID. The object\nfollows the JSON entity representation format (described in a section above).\n\nThis operation must return only one entity element, but it may happen that there are more\nthan one entity with the same ID and type (e.g. entities with same ID and type in different\nservice paths). In those cases  an error mesage is returned, specifying in the description the\nURL that could be used to get the list of conflicting entities, i.e. all the entities with such type and ID.\n\nResponse:\n\n* Successful operation uses 20O OK\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId: Boe_Idearium (required, string) - Entity ID\n    + entityType: Room (required, string) - Entity Type\n    + attrs: temperature, humidity (optional, string) - Attributes to be retrieved. Coma separated list.\n\n+ Response 200 (application/json)\n\n        {\n            \"type\": \"Room\",\n            \"id\": \"Bcn_Welt\",\n            \"temperature\": 21.7,\n            \"humidity\": 60,\n            \"location\": {\n                \"value\":  \"41.3763726, 2.1864475\",\n                \"type\": \"geo:point\",\n                \"crs\": \"WGS84\"\n            }\n        }\n\n### Update or append entity attributes [POST /v2/entities/type/{entityType}/id/{entityId}?{options}]\n\n<table style=\"width: 100%; margin: 12px 0 0 0;\">\n<tr><td colspan=\"2\"><strong>Required Parameters<\/strong><\/td><\/tr>\n<tr><td colspan=\"2\">none<\/td><\/tr>\n<tr><td colspan=\"2\"><strong>Optional Parameters<\/strong><\/td><\/tr>\n<tr>\n  <td style=\"padding-right: 40px; width: 140px;\">op<\/td>\n  <td>Operation options. Allowed values: <code>append<\/code>.<\/td>\n<\/tr>\n<\/table>\n\nThe request payload is an object representing the attributes to append or update. The object follows\nthe JSON entity representation format (described in a section above), except that `id` and `type`\nare not allowed.\n\nThe entity attributes are updated with the ones in the payload. In particular, depending on\nwhether `append` option is used:\n\n* If `append` is not used: the entity attributes are updated (if they previously exist) or appended\n  (in they don\'t previously exists) with the ones in the payload.\n* If `append` is used (i.e. strict append semantics): all the attributes in the payload not previously\n  existing in the entity are appended. In addition to that, in the case some of the attributes in the\n  payload already exist in the entity, an error if returned.\n\nResponse:\n\n* Successful operation uses 204 No Content.\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + entityType: Room (required, string) - Entity Type\n    + options: append (optional, string) - Strict append.\n\n+ Request (application/json)\n\n    + Body\n\n            {\n                \"ambientNoise\": 31.5\n            }\n\n+ Response 204\n\n### Update existing entity attributes [PATCH /v2/entities/type/{entityType}/id/{entityId}]\n\nThe request payload is an object representing the attributes to update. The object follows\nthe JSON entity representation format (described in a section above), except that `id` and `type`\nare not allowed.\n\nThe entity attributes are updated with the ones in the payload. In addition to that, if one or more\nattributes in the payload doesn\'t exist in the entity, an error if returned.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + entityType: Room (required, string) - Entity Type\n\n+ Request (application/json)\n\n        {\n            \"temperature\": 25.5,\n            \"seatsNumber\": 6\n        }\n\n+ Response 204\n\n### Replace all entity attributes [PUT /v2/entities/type/{entityType}/id/{entityId}]\n\nThe request payload is an object representing the new entity attributes. The object follows\nthe JSON entity representation format (described in a section above), except that `id` and `type`\nare not allowed.\n\nThe attributes previously existing in the entity are removed and replaced by the ones in the\nrequest.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + entityType: Room (required, string) - Entity Type\n\n+ Request (application/json)\n\n        {\n            \"temperature\": 25.5,\n            \"seatsNumber\": 6\n        }\n\n+ Response 204\n\n### Remove entity attributes [DELETE /v2/entities/type/{entityType}/id/{entityId}?{attrs}]\n\nDelete the entity.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId: Boe_Idearium (required, string) - Entity ID\n    + entityType: Room (required, string) - Entity Type\n\n+ Response 204\n\n-->\n\n## Attribute by Entity ID [/v2/entities/{entityId}/attrs/{attrName}]\n\n### Get attribute data [GET /v2/entities/{entityId}/attrs/{attrName}]\n\nReturns a JSON object with the attribute data of the attribute. The object follows the JSON representation for attributes\n(described in a section above).\n\nResponse:\n\n* Successful operation uses 20O OK.\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + attrName: temperature (required, string) - Attribute to be retrieved.\n\n+ Response 200 (application/json)\n\n        {\n            \"value\": 21.7\n        }\n\n### Update attribute data [PUT /v2/entities/{entityId}/attrs/{attrName}]\n\nThe request payload is an object representing the new attributes data. Previous attribute data\nis replaced by the one in the request. The object follows the JSON representation for attributes\n(described in a section above).\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + attrName: temperature (required, string) - Attribute name\n\n+ Request (application/json)\n\n        {\n            \"value\": 25.0,\n            \"unitCode\": \"CEL\"\n        }\n\n+ Response 200\n\n\n### Remove a single attribute [DELETE /v2/entities/{entityId}/attrs/{attrName}]\n\nRemoves an entity attribute.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + attrName: temperature (required, string) - Attribute name\n\n+ Response 204\n\n<!--\n\n## Attribute by Entity Type and ID [/v2/entities/type/{entityType}/id/{entityId}/attrs/{attrName}]\n\n### Get attribute data [GET /v2/entities/type/{entityType}/id/{entityId}/attrs/{attrName}]\n\nReturns a JSON object with the attribute data of the attribute. The object follows the JSON representation for attributes\n(described in a section above).\n\nResponse:\n\n* Successful operation uses 20O OK.\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + entityType: Room (required, string) - Entity Type\n    + attrName: temperature (required, string) - Attribute to be retrieved.\n\n+ Response 200 (application/json)\n\n        {\n            \"value\": 21.7\n        }\n\n### Update attribute data [PUT /v2/entities/type/{entityType}/id/{entityId}/attrs/{attrName}]\n\nThe request payload is an object representing the new attributes data. Previous attribute data is replaced\nby the one in the request. The object follows the JSON representation for attributes\n(described in a section above).\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + entityType: Room (required, string) - Entity Type\n    + attrName: temperature (required, string) - Attribute name\n\n+ Request (application/json)\n\n        {\n            \"value\": 25.0,\n            \"unitCode\": \"CEL\"\n        }\n\n+ Response 200\n\n\n### Remove a single attribute [DELETE /v2/entities/type/{entityType}/id/{entityId}/attrs/{attrName}]\n\nRemoves the attribute from the entity.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + entityType: Room (required, string) - Entity Type\n    + attrName: temperature (required, string) - Attribute name\n\n+ Response 204\n\n-->\n\n## Attribute Value by Entity ID [/v2/entities/{entityId}/attrs/{attrName}/value{?options}]\n\n### Get attribute data [GET /v2/entities/{entityId}/attrs/{attrName}/value{?options}]\n\n<table style=\"width: 100%; margin: 12px 0 0 0;\">\n<tr><td colspan=\"2\"><strong>Required Parameters<\/strong><\/td><\/tr>\n<tr><td colspan=\"2\">none<\/td><\/tr>\n<tr><td colspan=\"2\"><strong>Optional Parameters<\/strong><\/td><\/tr>\n<tr>\n  <td style=\"padding-right: 40px; width: 140px;\">options<\/td>\n  <td>Operation opations. Allowed values: <code>text<\/code>.<\/td>\n<\/tr>\n<\/table>\n\nIt returns a JSON object with a `value` propierty with the value of the attribute. The `text` option\nindicates that the attribute value must be provided as plain text (text/plain).\n\nResponse:\n\n* Successful operation uses 20O OK.\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + attrName: temperature (required, string) - Attribute to be retrieved.\n\n+ Response 200 (application/json)\n\n        {\n            \"value\": 21.7\n        }\n\n### Update attribute value [PUT /v2/entities/{entityId}/attrs/{attrName}/value]\n\nThe request payload is the new attribute value. It can be represented as a JSON object (application/json),\nwith a `value` property, or as plain text (text/plain).\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + attrName: temperature (required, string) - Attribute name\n\n+ Request (application/json)\n\n        {\n            \"value\": 25.0\n        }\n\n+ Response 200\n\n<!--\n\n## Attribute Value by Entity type and ID [/v2/entities/type/{entityType}/id/{entityId}/attrs/{attrName}/value{?options}]\n\n### Get attribute data [GET /v2/entities/type/{entityType}/id/{entityId}/attrs/{attrName}/value{?options}]\n\n<table style=\"width: 100%; margin: 12px 0 0 0;\">\n<tr><td colspan=\"2\"><strong>Required Parameters<\/strong><\/td><\/tr>\n<tr><td colspan=\"2\">none<\/td><\/tr>\n<tr><td colspan=\"2\"><strong>Optional Parameters<\/strong><\/td><\/tr>\n<tr>\n  <td style=\"padding-right: 40px; width: 140px;\">options<\/td>\n  <td>Operation opations. Allowed values: <code>text<\/code>.<\/td>\n<\/tr>\n<\/table>\n\nIf the `text` option is not used, returns a JSON object which the `value` of the attribute. If the\n`text` option is used returns the attribute value in plain text.\n\nResponse:\n\n* Successful operation uses 20O OK.\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + entityType: Room (required, string) - Entity Type\n    + attrName: temperature (required, string) - Attribute to be retrieved.\n\n+ Response 200 (application/json)\n\n        {\n            \"value\": 21.7\n        }\n\n### Update attribute value [PUT /v2/entities/type/{entityType}/id/{entityId}/attrs/{attrName}/value]\n\nThe request payload is the new attribute value. It can be represented as a JSON object (application/json),\nwith a `value` property, or as plain text (text/plain).\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + entityType: Room (required, string) - Entity Type\n    + attrName: temperature (required, string) - Attribute name\n\n+ Request (application/json)\n\n        {\n            \"value\": 25.0\n        }\n\n+ Response 200\n\n-->\n\n## Entity types [/v2/types{?limit,offset,options}]\n\n### Retrieve entity types [GET /v2/types/{?limit,offset,options}]\n\n<table style=\"width: 100%; margin: 12px 0 0 0;\">\n<tr><td colspan=\"2\"><strong>Required Parameters<\/strong><\/td><\/tr>\n<tr><td colspan=\"2\">none<\/td><\/tr>\n<tr><td colspan=\"2\"><strong>Optional Parameters<\/strong><\/td><\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">limit<\/td><td>Limit the number of types to be retrieved<\/td><\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">offset<\/td><td>Skip a number of records<\/td><\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">options<\/td><td>\nThis operation supports two options:\n\n<ul>\n  <li><code>count<\/code>: when used, the total types number is returned as a HTTP in the\n  response name <code>X-Total-Count<\/code>.<\/li>\n  <li><code>values<\/code>: when used, the response payload is a JSON array with a\n  list of entity types.<\/li>\n<\/td><\/tr>\n<\/table>\n\nIf `values` option is not use, the operation returns a JSON object which properties are entity types. The properties\nvalue is a JSON object with information about the type: `attrs` (the union set of attribute names along all the entities\nof such type) and `count` (the number of entities belonging to that type).\n\nIf `values` option is used, the operation returns a JSON array with the list of entity types names as strings.\n\nResponse code:\n\n* Successful operation uses 200 OK\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + limit: 20 (optional, number)\n    + offset: 20 (optional, number)\n\n+ Response 200 (application/json)\n\n        {\n          \"Car\": {\n            \"attrs\": {\n              \"speed\": {\n                \"type\": null\n              },\n              \"fuel\": {\n                \"type\": \"gasoline\"\n              },\n              \"fuel\": {\n                \"type\": \"diesel\"\n              },\n              \"temperature\": {\n                \"type\": \"urn:phenomenum:temperature\"\n              }\n            },\n            \"count\": 12\n          },\n          \"Room\": {\n            \"attrs\": {\n              \"pressure\": {\n                \"type\": null\n              },\n              \"humidity\": {\n                \"type\": \"percentage\"\n              },\n              \"temperature\": {\n                \"type\": \"urn:phenomenum:temperature\"\n              }\n            },\n            \"count\": 7\n          }\n        }\n\n## Entity type [/v2/types/{entityType}]\n\n### Retrieve entity type [GET /v2/types/{entityType}]\n\nThe operation returns a JSON object with information about the type: `attrs` (the union set of attribute names along all\nthe entities of such type) and `count` (the number of entities belonging to that type).\n\nResponse code:\n\n* Successful operation uses 200 OK\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityType: Room (required, string) - Entity Type\n\n+ Response 200 (application/json)\n\n          {\n            \"attrs\": {\n              \"pressure\": {\n                \"type\": null\n              },\n              \"humidity\": {\n                \"type\": \"percentage\"\n              },\n              \"temperature\": {\n                \"type\": \"urn:phenomenum:temperature\"\n              }\n            },\n            \"count\": 7\n          }\n\n## Context Subscriptions [/v2/entities/{entityId}/subscriptions]\n\nA subscription is represented by a JSON object with the following fields:\n\n* `id`: Subscription unique identifier. Automatically created at creation time.\n* `subject`: It is an object that describes the subject of the subscription.\n* `notification`: It is an object that describes the notification received by the subscriber.\n* `duration`: Duration of the subscription in ISO8601 format. Infinite if not specified.\n\nA `subject` contains the following subfields:\n\n* `entities`: A list of objects, each one composed of the following subfields (`id`/`idPattern` or `type` must be present):\n * `id` or `idPattern`: Id or pattern of the affected entities (optional). Both cannot be used at the same time.\n * `type`: Type of the affected entities (optional).\n* `condition`: Condition that will trigger the notification. It can have two optional properties:\n * `attributes`: array of attribute names\n * `expression`: an expression composed of `q`, `geometry` and `coords` (see \"List entities\" operation above\n   about this field).\n\nA `notification` object contains the following subfields:\n\n* `attributes`: List of attributes to be included in the notification message. If not specified (or empty), all attributes are included\n  in the notification\n* `callback` : URL pointing to the service which will be invoked when a notification is generated. A NGSIv2\n  compliant server must support `http` URL schema, other schemas (e.g. schemas for web sockets) could also be supported.\n* `throttling`: Minimal period of time (in ISO8601 format) which must elapse between two consecutive notifications. It\n  is optional.\n\nNotification rules are as follow:\n\n* If `attributes` and `expression` are used, a notification is sent whenever one of the attributes in the `attributes` list changes and\n  at the same time `expression` matches.\n* If `attributes` is used and `expression` is not used, a notification is sent whenever one of the attributes in the `attributes` list changes-\n* If `attributes` is not used and `expression` is used, a notification is sent whenever any of the attributes of the entity changes and\n  at the same time `expression` matches.\n* If neither `attributes` or `expression` are used, a notification is sent whenever any of the attributes of the entity changes.\n\n\n### List subscriptions [GET /v2/subscriptions]\n\nReturns a list of all the subscriptions present in the system\n\nResponse:\n\n* Successful operation uses 200 OK\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Response 200\n\n        [\n            {\n                \"id\": \"abcdefg\",\n                \"subject\": {                    \n                    \"entities\": [\n                        {\n                            \"id\": \"Bcn_Welt\",\n                            \"type\": \"Room\"\n                        }\n                    ],\n                    \"condition\": {\n                       \"attrs:\" [ \"temperature \" ],\n                       \"expression:\" {\n                          \"q\": \"temperature>40\"\n                       }\n                    }\n                },\n                \"notification\": {\n                    \"callback\": \"http://localhost:1234\",\n                    \"attributes\": [\"temperature\", \"humidity\"],\n                    \"throttling\": \"PT5S\"\n                },\n                \"duration\": \"PT1M\"\n            }\n        ]\n\n### Create a new subscription [POST /v2/subscriptions]\n\nCreates a new subscription.\nThe subscription is represented by a JSON object as described at the beginning of this section.\n\nResponse:\n\n* Successful operation uses 201 Created\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Request (application/json)\n\n        {\n            \"subject\": {\n                \"entities\": [\n                    {\n                        \"type\": \"Room\"\n                    }\n                ],\n                \"condition\": {\n                    \"attributes:\" [ \"temperature \" ],\n                    \"expression:\" {\n                       \"q\": \"temperature>40\"\n                    }\n                 }\n            },\n            \"notification\": {\n                \"callback\": \"http://localhost:1234\",\n                \"attributes\": [\"temperature\", \"humidity\"],\n                \"throttling\": \"PT5S\"\n            },            \n            \"duration\": \"PT1M\"\n        }\n\n+ Response 201\n\n    + Headers\n\n            Location: /v2/subscriptions/abcde98765\n\n### Get subscription [GET /v2/subscriptions/{subscriptionId}]\n\nThe response is the subscription represented by a JSON object as described at the beginning of this section.\n\nResponse:\n\n* Successful operation uses 200 OK\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + subscriptionId: abcdef (required, string) - subscription Id.\n\n+ Response 200 (application/json)\n\n        {\n            \"id\": \"abcdef\",\n            \"subject\": {\n                \"entities\": [\n                    {\n                        \"type\": \"Room\"\n                    }\n                ],\n                \"condition\": {\n                    \"attributes:\" [ \"temperature \" ],\n                    \"expression:\" {\n                       \"q\": \"temperature>40\"\n                    }\n                 }\n            },\n            \"notification\": {\n                \"callback\": \"http://localhost:1234\",\n                \"attributes\": [\"temperature\", \"humidity\"],\n                \"throttling\": \"PT5S\"\n            },\n            \"duration\": \"PT1M\"\n        }\n\n### Update subscription [PATCH /v2/subscriptions/{subscriptionId}]\n\nOnly the fields included in the request are updated in the subscription.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + subscriptionId: abcdef (required, string) - subscription Id.\n\n+ Request (application/json)\n\n        {\n            \"duration\": \"PT1M\"\n        }\n\n+ Response 204\n\n### Delete subscription [DELETE /v2/subscriptions/{subscriptionId}]\n\nCancels subscription.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + subscriptionId: abcdef (required, string) - subscription Id.\n\n+ Response 204\n\n## Context Provider Registration [/v2/registrations]\n\nContext Registration allows to associate external services to context data. One of the main\nuse cases of this functionality is the association of Context Providers.\n\nA context registration is represented by a JSON object with the following fields:\n\n* `id`: Unique identifier assigned to the registration. Automatically created at creation time.\n* `subject` : It s an object that describes the subject of the registration.\n* `callback` : URL pointing to the service which is registered. In the case of a Context Provider\ncorresponds to the URL of the provider service.\n* `duration`: Duration of the registration in ISO8601 format. Default duration is infinite.\n\nA `subject` contains the following subfields:\n\n* `entities`: A list of objects, each one composed of the following subfields (`id`/`idPattern` or type must be present):\n * `id` or `idPattern`: Id or pattern of the affected entities (optional). Both cannot be used at the same time.\n * `type`: Type of the affected entities (optional).\n* `attributes`: List of attributes to be provided (if not specified it would mean all).\n\n### List registrations [GET /v2/registrations]\n\nLists all the registrations present in the system.\n\nResponse:\n\n* Successful operation uses 200 OK\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Response 200\n\n        [\n            {\n                \"id\": \"abcdefg\",\n                \"subject\": {\n                    \"entities\": [\n                        {\n                            \"id\": \"Bcn_Welt\",\n                            \"type\": \"Room\"\n                        }\n                    ],\n                    \"attributes\": [\n                        \"temperature\"\n                    ]\n                },\n                \"callback\": \"http://localhost:1234\",               \n                \"duration\": \"PT1M\"\n            }\n        ]\n\n### Create a new context provider registration [POST /v2/registrations]\n\nCreates a new registration. This is typically used for associating context providers\nto certain data.\nThe registration is represented by a JSON object as described at the beginning of this section.\n\nResponse:\n\n* Successful operation uses 201 Created\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Request (application/json)\n\n        {\n            \"subject\": {\n                \"entities\": [\n                    {\n                        \"type\": \"Room\"\n                    }\n                ],\n                \"attributes\": [\n                      \"humidity\"\n                ]\n            },\n            \"callback\":  \"http://localhost:1234\",\n            \"duration\": \"PT1M\"\n        }\n\n+ Response 201\n\n    + Headers\n\n            Location: /v2/registrations/abcde98765\n\n### Get context provider registration [GET /v2/registrations/{registrationId}]\n\nThe response is the registration represented by a JSON object as described at the beginning of this section.\n\nResponse:\n\n* Successful operation uses 200 OK\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + registrationId: abcdef (required, string) - registration Id.\n\n+ Response 200 (application/json)\n\n        {\n            \"id\": \"abcde\",\n            \"subject\": {\n                \"entities\": [\n                    {\n                        \"type\": \"Room\"\n                    }\n                ],\n                \"attributes\": [\n                      \"humidity\"\n                ]\n            },\n            \"callback\":  \"http://localhost:1234\",\n            \"duration\": \"PT1M\"\n        }\n\n### Update context provider registration [PATCH /v2/registrations/{registrationId}]\n\nOnly the fields included in the request are updated in the registration.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + redId: abcdef (required, string) - registration Id.\n\n+ Request (application/json)\n\n        {\n            \"duration\": \"PT1M\"\n        }\n\n+ Response 204\n\n### Delete context provider registration [DELETE /v2/registrations/{registrationId}]\n\nCancels registration.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + redId: abcdef (required, string) - registration Id.\n\n+ Response 204\n\n## POJ RPC Operations [/v2/op]\n\n### Update [POST /v2/op/update]\n\nThis operation allows to create, update and/or delete several entities in a single batch operation.\nThe payload is an object with two properties:\n\n* `actionType`, to specify the kind of update action to do: either APPEND, APPEND_STRICT, UPDATE, DELETE.\n* `entities`, an array of entities, each one specified using the JSON entity representation format (described\n  in a section above).\n\nResponse:\n\n* Successful operation uses 200 OK.\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Request (application/json)\n\n        {\n            \"actionType\": \"APPEND\",\n            \"entities\": [\n                {\n                    \"type\": \"Room\",\n                    \"id\": \"Bcn-Welt\",\n                    \"temperature\": 21.7,\n                    \"humidity\": 60\n                },\n                {\n                    \"type\": \"Room\",\n                    \"id\": \"Mad_Aud\",\n                    \"temperature\": 22.9,\n                    \"humidity\": 85\n                }\n            ]\n        }\n\n+ Response 200\n\n\n### Query [POST /v2/op/query]\n\n<table style=\"width: 100%; margin: 12px 0 0 0;\">\n<tr><td colspan=\"2\"><strong>Required Parameters<\/strong><\/td><\/tr>\n<tr><td colspan=\"2\">none<\/td><\/tr>\n<tr><td colspan=\"2\"><strong>Optional Parameters<\/strong><\/td><\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">limit<\/td><td>Limit the number of entities to be retrieved<\/td><\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">offset<\/td><td>Skip a number of records<\/td><\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">options<\/td><td>\nThis operation supports two options:\n\n<ul>\n  <li><code>count<\/code>: when used, the total number of entities is returned in the response as a HTTP header named <code>X-Total-Count<\/code>.<\/li>\n  <li><code>canonical<\/code>: when used, the response payload uses the \"canonical form\". See JSON entity representation format section\n  for details.<\/li>\n<\/td><\/tr>\n<\/table>\n\nThe response payload is an Array which contains one object per matching entity. Each entity follows\nthe JSON entity representation format (described in a section above).\n\nThe payload may contain the following elements (all of them optional):\n\n* `entities`: a list of entites to search for. Each entity is represented by a JSON object with the following\n  elements:\n   * `id` or `idPattern` (both cannot be used at the same time): specifies the exact ID (in the case of `id`)\n     or pattern (in the case of `idPattern`) of the entities to search for. If omitted, it means \"any entity\n     ID\".\n   * `type`: specifies the type of the entities to search for. If omitted, it means \"any entity type\".\n* `attributes`: a list of attributes names to search for. If omitted, it means \"any attribute\".\n* `scopes`: a list of scopes to restrict the results of the query. Each scope is represented by a JSON\n   object with a `type` (a JSON string) and `value` (whose type depends on the `type` property). The\n   different available scopes are described elsewhere.\n\nResponse code:\n\n* Successful operation uses 200 OK\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + limit: 20 (optional, number)\n    + offset: 20 (optional, number)\n\n+ Request (application/json)\n\n        {\n            \"entities\": [\n                {\n                    \"idPattern\": \".*\",\n                    \"type\": \"myFooType\"\n                },\n                {\n                    \"id\": \"myBar\",\n                    \"type\": \"myBarType\"\n                }\n            ],\n            \"attributes\": [\n                \"temperature\",\n                \"humidity\"\n            ],\n            \"scopes\": [\n                {\n                    \"type\": \"FIWARE::...\",\n                    \"value\": \"...\"\n                }\n            ]\n        }\n\n+ Response 200 (application/json)\n\n        [\n         {\n            \"type\": \"Room\",\n            \"id\": \"DC_S1-D41\",\n            \"temperature\": 35.6\n         },\n         {\n            \"type\": \"Room\",\n            \"id\": \"Boe-Idearium\",\n            \"temperature\": 22.5\n         },\n         {\n            \"type\": \"Car\",\n            \"id\": \"P-9873-K\",\n            \"speed\": {\n                \"value\": 100,\n                \"type\": \"number\",\n                \"accuracy\": 2,\n                \"timestamp\": {\n                    \"value\": \"2015-06-04T07:20:27.378Z\",\n                    \"type\": \"date\"\n                }\n            }\n         }\n        ]\n\n### Register [POST /v2/op/register]\n\nThis operation allows to create, update and/or delete several registrations in a single batch operation.\nThe payload is an object with two properties:\n\n* `actionType`, to specify the kind of register action to do: either CREATE, UPDATE, DELETE.\n* `registrations`, an array of registration, each one specified using the JSON registration representation\n  format (described in a section above). In the case of CREATE operation, the registration `id` must not be\n  included.\n\nResponse:\n\n* Successful operation uses 200 OK. In addition, in the case of successful CREATE, a list of IDs is returned,\n  each one corresponding to the ID of the element in the request payload and in the same order.\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Request (application/json)\n\n        {\n          \"actionType\": \"CREATE\",\n          \"registrations: [\n             {\n               \"subject\": {\n                  \"entities\": [\n                     {\n                        \"type\": \"Room\"\n                     }\n                  ],\n                  \"attributes\": [\n                     \"humidity\"\n                 ]\n               },\n               \"callback\": \"http://localhost:1234\",\n               \"duration\": \"PT1M\"\n             },\n             {\n               \"subject\": {\n                 \"entities\": [\n                    {\n                       \"type\": \"Car\"\n                    }\n                 ],\n                 \"attributes\": [\n                   \"speed\"\n                 ]\n               },\n               \"callback\": \"http://localhost:5678\",\n               \"duration\": \"PT1M\"\n             }\n          ]\n        }\n\n+ Response 200\n\n        [\n          \"abcd\",\n          \"efgh\"\n        ]\n\n### Discover [POST /v2/op/discover]\n\n<table style=\"width: 100%; margin: 12px 0 0 0;\">\n<tr><td colspan=\"2\"><strong>Required Parameters<\/strong><\/td><\/tr>\n<tr><td colspan=\"2\">none<\/td><\/tr>\n<tr><td colspan=\"2\"><strong>Optional Parameters<\/strong><\/td><\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">limit<\/td><td>Limit the number of registrations to be retrieved<\/td><\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">offset<\/td><td>Skip a number of registrations<\/td><\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">options<\/td><td>\nThis operation supports two options:\n\n<ul>\n  <li><code>count<\/code>: when used, the total number of registrations is returned in the response as a HTTP header named <code>X-Total-Count<\/code>.<\/li>\n<\/td><\/tr>\n<\/table>\n\nThe response payload is an Array which contains one object per matching registration. Each registration follows\nthe JSON registration representation format (described in a section above).\n\nThe payload may contain the following elements (all of them optional):\n\n* `entities`: a list of entites to search for. Each entity is represented by a JSON object with the following\n  elements:\n   * `id` or `idPattern` (both cannot be used at the same time): specifies the exact ID (in the case of `id`)\n     or pattern (in the case of `idPattern`) of the entities to search for. If omitted, it means \"any entity\n     ID\".\n   * `type`: specifies the type of the entities to search for. If omitted, it means \"any entity type\".\n* `attributes`: a list of attributes names to search for. If omitted, it means \"any attribute\".\n* `scopes`: a list of scopes to restrict the results of the query. Each scope is represented by a JSON\n   object with a `type` (a JSON string) and `value` (whose type depends on the `type` property). The\n   different available scopes are described elsewhere.\n\nResponse code:\n\n* Successful operation uses 200 OK\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + limit: 20 (optional, number)\n    + offset: 20 (optional, number)\n\n+ Request (application/json)\n\n        {\n          \"entities\": [\n            {\n              \"idPattern\": \".*\",\n              \"type\": \"myFooType\"\n            },\n            {\n              \"id\": \"myBar\",\n              \"type\": \"myBarType\"\n            }\n          ],\n          \"attributes\": [\n            \"temperature\",\n            \"humidity\"\n          ],\n          \"scopes\": [\n            {\n              \"type\": \"FIWARE::Filter::Foo\",\n              \"value\": \"Bar\"\n            }\n          ]\n        }\n\n+ Response 200 (application/json)\n\n        [\n          {\n            \"id\": \"abcde\",\n            \"subject\": {\n              \"entities\": [\n                \"id\": \"Foo\",\n                \"type\": \"myFooType\"\n              ],\n              \"attributes\": [\n                \"humidity\"\n              ]\n            },\n            \"callback\": \"http://localhost:1234\",\n            \"duration\": \"PT1M\"\n          },\n          {\n            \"id\": \"efgh\",\n            \"subject\": {\n              \"entities\": [\n                \"id\": \"myBar\",\n                \"type\": \"myBarType\"\n              ],\n              \"attributes\": [\n                \"speed\"\n              ]\n            },\n            \"callback\": \"http://localhost:5678\",\n            \"duration\": \"PT1M\"\n          }\n        ]\n\n## OMA-NGSI Operations [/v2/subscribeContext]\n\n(The need/usefulness of these operations is currently under discussion)\n\nFor the sake of completeness here is an enumeration of the OMA-NGSI (9 & 10) operations. These\noperations will be supported under the \'v2\' resource as well.\n\n### subscribeContext [POST /v2/subscribeContext]\n\n(Not needed, a it is covered by the RESTful POST /v2/subscriptions operation)\n\n### updateContextSubscription [POST /v2/updateContextSubscription]\n\n(Not needed, a it is covered by the RESTful PATCH /v2/subscriptions operation)\n\n### unsubscribeContext [POST /v2/unsubscribeContext]\n\n(Not needed, a it is covered by the RESTful DELETE /v2/subscriptions operation)\n\n### notifyContext [POST /v2/notifyContext]\n\n(The payload of the v2 notifyContext should be described)\n\n### subscribeContextAvailability [POST /v2/subscribeContextAvailability]\n\n(Not needed as POJ RPC, but we need to define a RESTful operation for this, analogous to the NGSI10 one)\n\n### updateContextAvailabilitySubscription [POST /v2/updateContextAvailabilitySubscription]\n\n(Not needed as POJ RPC, but we need to define a RESTful operation for this, analogous to the NGSI10 one)\n\n### unsubscribeContextAvailability [POST /v2/unsubscribeContextAvailability]\n\n(Not needed as POJ RPC, but we need to define a RESTful operation for this, analogous to the NGSI10 one)\n\n### notifyContextAvailability [POST /v2/notifyContextAvailability]\n\n(The payload of the v2 notifyContextAvailability should be described)\n"
    });
  </script>
</body>
</html>
