<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>fiware-ngsiv2-reference</title>
</head>
<body>
  <script src="https://api.apiary.io/seeds/embed.js"></script>
  <script>
    var embed = new Apiary.Embed({
      apiBlueprint: "FORMAT: 1A\nHOST: http://orion.lab.fiware.org/\n\n# FIWARE-NGSI-Simple\n\nFIWARE-NGSI Simple API (v2) Specification.\n\nThis is a work in progress and is changing on a daily basis.\nPlease send your comments to fiware-ngsi@lists.fiware.org\n\nIn addition, note that a list of currently open discussions is available at\n\n* https://github.com/telefonicaid/fiware-orion/issues/1022\n* https://github.com/telefonicaid/fiware-orion/issues/1034\n* https://github.com/telefonicaid/fiware-orion/issues/1035\n\nThis specification is licensed under the\n[FIWARE Open Specification License]\n(http://forge.fiware.org/plugins/mediawiki/wiki/fiware/index.php/FI-WARE_Open_Specification_Legal_Notice_%28essential_patents_license%29).\n\n\n## JSON entity representation\n\nAn entity is represented by a a JSON object which contain the following properties:\n\n* `id` for the entity ID, represented by a JSON string. If the entity has an `id` attribute itself it will be ignored.\n* `type` for the entity type, represented by a JSON string. If the entity has a `type` attribute itself it will be ignored.\n  If the entity doesn\'t have a type, then this property is not included.\n* A collection of properties, one per entity attribute. Property values can be single values or they can include,\n  `type` and properties representing metadata as well. Property values which correspond to the primitive JSON datatypes\n  \"string\", \"number\" and \"boolean\" and with no metadata are rendered as regular JSON values. Property values\n  which specify a custom type or include metadata are rendered as JSON objects with the following properties:\n  * `value`: for the attribute value, rendered as a regular JSON value depending on the type. Attributes with an\n    user-defined informative types are rendered as JSON strings (TBD).\n  * `type`: a JSON string which represents the attribute type provided at attribute creation time.\n  * A collection of properties one per metadata field associated to the attribute value. Metadata properties follow the\n    same representation rules that applies to properties which represent attributes (except that a metadata\n    cannot have metadata properties). \n\nCanonical format description (TBD).\n\n### Predefined types\n\nAll attribute types not included in the list below are considered *user-defined informative* types. The values of\nuser-defined informative types are represented by JSON string.\n\n* `number` (or `Number`):  identifies numbers, either integer or float.\nThey are associated to JSON number type (see https://developer.mozilla.org/en-US/docs/Glossary/Number).\nOperators allowed are: greater than, lesser than, greater or equal, lesser or equal and range.\n\n```\n\"temperature\": 32.5\n```\n\n* `string` (or `String`): identifies text string. They are represented by JSON strings (see https://developer.mozilla.org/en-US/docs/Glossary/String).\n\n```\n\"msg\": \"Hello world\"\n```\n\n* `boolean` (or `Boolean`): identifies a logical value, either true or false. They are represented by JSON booleans (see https://developer.mozilla.org/en-US/docs/Glossary/Boolean).\n\n```\n\"active\": true\n```\n\n* `date` (or `Date`):  identifies dates, in ISO8601 format. They are represented by JSON strings. Operators allowed are:\ngreater than, lesser than, greater or equal, lesser or equal and range.\n\n```\n\"timestamp\": \"2017-06-17T07:21:24.238Z\"\n```\n\n\n* `geo:point`: identifies a geolocation. They are represented by JSON strings. An\nentity can only have one `geo:point` attribute (TBD: this is yet under discussion, one possibility is\nthere can be multiple points associated to an entity but an entity can only be located on one place).\n\n```\n{\n  ...\n  \"location\": {\n    \"value\": \"41.3763726, 2.1864475,14\",\n    \"type\": \"geo:point\"\n  }\n}\n```\n\nAt creation or update time, the type has to be coherent with the value of the attribute, e.g the following\nwill result in an error response:\n\n(TBD: this behaviour is under discussion, specially the case for the \"myType\" with JSON number for the value)\n\n```\n{\n  \"value\": \"23.5\", -> value should be: 23.5\n  \"type\": \"number\"\n}\n\n\n{\n  \"value\": 23.5,   -> value should be: \"23.5\"\n  \"type\": \"string\"\n}\n\n{\n  \"value\": \"23.5\", -> value should be: \"23.5\" (user defined types always use JSON strings as value)\n  \"type\": \"myType\"\n}\n\n{\n  \"value\": \"foo, bar\", -> it is not correctly formated as coordinates\n  \"type\": \"geo:point\"\n}\n```\n\n## Error responses\n\nIn the case of being present, the error payload is JSON object including the following fields:\n\n* `error` (mandatory): a textual description of the error.\n* `description` (optional): additional information about the error.\n\n## API Entry Point [/v2]\n\n### Retrieve Entry Points [GET /v2]\n\nThis resource does not have any attributes. Instead it offers the initial\nAPI affordances in the form of the links in the JSON body.\n\nIt is recommended to follow the “url” link values,\n[Link](https://tools.ietf.org/html/rfc5988) or Location headers where\napplicable to retrieve resources. Instead of constructing your own URLs,\nto keep your client decoupled from implementation details.\n\n+ Response 200 (application/json)\n\n        {\n            \"entities_url\":      \"/v2/entities\",\n            \"types_url\":         \"/v2/types\",\n            \"subscriptions_url\": \"/v2/subscriptions\",\n            \"registrations_url\": \"/v2/registrations\"\n        }\n\n## Entities [/v2/entities{?limit,offset,options,type,id,idPattern,q,geometry,coords,attrs}]\n\n### List entities [GET /v2/entities{?limit,offset,options,type,id,idPattern,q,geometry,coords,attrs}]\n\nRetrieves a list of entities which match criteria defined by the following parameters: `id`, `type`, `idPattern`, `q`,\n`geometry` and `coords` attribute (see below for a detailed description of these parameters). A given entity\nhave to match all the criteria to be retrieved (i.e. criteria are combined in a logical AND way).\n\n<table style=\"width: 100%; margin: 12px 0 0 0;\">\n<tr><td colspan=\"2\"><strong>Required Parameters<\/strong><\/td><\/tr>\n<tr><td colspan=\"2\">none<\/td><\/tr>\n<tr><td colspan=\"2\"><strong>Optional Parameters<\/strong><\/td><\/tr>\n<tr>\n  <td style=\"padding-right: 40px; width: 140px;\">id<\/td><td>A comma separated list of elements.\n  Retrieve entities which ID match one of the elements in the list.<\/td>\n<\/tr>\n<tr>\n  <td style=\"padding-right: 40px; width: 140px;\">type<\/td><td>A comma separated list of elements.\n  Retrieve entities which type match one of the elements in the list.<\/td>\n<\/tr>\n<tr>\n  <td style=\"padding-right: 40px; width: 140px;\">idPattern<\/td><td>A correctly formated regular\n  expression. Retrieve entities which ID matches the regular expression.<\/td>\n<\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">q<\/td><td>\n\n<p>A query expression, composed of a list of statements separated by <code>;<\/code>, i.e.<\/p>\n\n<p><code>\nq=statement;statements;statement\n<\/code><\/p>\n\n<p>Each statement express a matching condition. The result of the query is the match on each one of the statements, e.g. a\nAND logical condition among the different statements. There are two kind of statements: <em>unary statements<\/em> and\n<em>binary staments<\/em>.<\/p>\n\n<p>Binary statements are composed by an attribute name (e.g. \"temperature\"), operator and value (which format\ndepends on the operator), e.g.:<\/p>\n\n<p><code>\ntemperature==50<br/>\ntemperature<=20\n<\/code><\/p>\n\n<p>The list of operators (and the format of the values they use) is as follows:<\/p>\n\n<ul>\n  <li>Equal: <code>==<\/code>. It accepts the following values:\n    <ul>\n      <li>Single element, e.g. <code>temperature==40<\/code>. It matches entities whose attribute value\n      that exact value.<\/li>\n      <li>A list of comma-separated values, e.g. <code>color==black,red<\/code>. It matches entities whose\n      attribute value is one of the values (OR clause). Eg. entities which <code>color<\/code> is set to\n      <code>black<\/code> will match, while entities which <code>color<\/code> is set to <code>white<\/code>\n      will not match.<\/li>\n      <li>A range, specified as a minimum and maximum separated by <code>..<\/code>. It match if\n      the value is in the interval between the minimum and the maximum (both included). It can only be used\n      with attributes which contain dates or numbers. E.g. <code>temperature==10..20<\/code> matchs if the\n      temperature is greater or equal than 10 and lower or equal than 20.<\/li>\n    <\/ul>\n  <\/li>\n  <li>Unequal: <code>!=<\/code>. It accepts the following values:\n    <ul>\n      <li>The value is a single element, e.g. <code>temperature!=40<\/code>. It matches entities whose attribute\n      value is not that exact value.<\/li>\n      <li>A list of comma-separated values, e.g. <code>color!=black,red<\/code>. It matches entities whose\n      attribute value is not any of the values (AND clause). Eg. entities whose <code>color<\/code> is set\n      to <code>black<\/code> will not match, while entities whose <code>color<\/code> is set to\n      <code>white<\/code> match.<\/li>\n      <li>A range, specified as a minimum and maximum separated by <code>..<\/code>. It match\n      if the value is not in the interval between the minimum and the maximum (both included). It can only\n      be used with attributes which contain dates or numbers. E.g. <code>temperature!=10..20<\/code>matchs if\n      the temperature is lower than 10 or greater than 20 (it will not match if the tempeature is 10 or the\n      temperature is 20).<\/li>\n    <\/ul>\n  <\/li>\n  <li>Greater than: <code>&gt;<\/code>. The value is a single element, e.g. <code>temperature&gt;40<\/code>. It\n  matches entities which attribute value is strictly greater than that value. It can only\n  be used with attributes which contain dates or numbers.<\/li>\n  <li>Lesser than: <code>&lt;<\/code>. The value is a single element, e.g. <code>temperature&lt;40<\/code>. It\n  matches entities which attribute value is strictly lesser than that value. It can only\n  be used with attributes which contain dates or numbers.<\/li>\n  <li>Greater or equal than: <code>&gt;=<\/code>. The value is a single element, e.g. <code>temperature&gt;=40<\/code>.\n  It matches entities which attribute value is greater than or equal to that value. It can only\n  be used with attributes which contain dates or numbers.<\/li>\n  <li>Lesser or equal than: <code>&lt;=<\/code>. The value is a single element, e.g. <code>temperature&lt;=40<\/code>. It\n  matches entities which attribute value is lesser than or equal to that value. It can only\n  be used with attributes which contain dates or numbers.<\/li>\n<\/ul>\n\n<p>In the case of equal or inequal, if the value to match include a <code>,<\/code>, you can use simple quote\n(<code>\'<\/code>), e.g: <code>color==\'light,green\',\'deep,blue\'<\/code>.<\/p>\n\n<p>Unary statements are composed of a unary operator (either <code>+<\/code>or <code>-<\/code>) and are used in two situations:<\/p>\n\n<ul>\n  <li>To check for attribute existence. E.g. <code>+temperature<\/code>matches entities which have\n  a temperature attribute (no matter its value), while <code>-temperature<\/code>matches entities which don\'t have\n  a temperature attribute.<\/li>\n  <li>To check for entity type existence, with the <code>type<\/code>keyword. E.g, <code>-type<\/code>\n  matches entities which don\'t have a type.<\/li>\n<\/ul>\n\n<\/td><\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">geometry<\/td><td>\n\n<p>Defines a geografical area so only the entities located in that area matches the query. It is composed of a tokens list\nseparated by <code>;<\/code>. The first token is the shape of the geometry, the rest of the tokens (if any) depends\non the shape. In particular, the following geometries can be defined so far:<\/p>\n\n<ul>\n  <li><code>geometry=circle;radius:4000<\/code>, inside a circle (radius is in meters).<\/li>\n  <li><code>geometry=circle;radius:4000;external<\/code>, outside a circle (radius is in meters).<\/li>\n  <li><code>geometry=polygon<\/code>, inside a polygon.<\/li>\n  <li><code>geometry=polygon;external<\/code>, outside a polygon.<\/li>\n<\/ul>\n\n<\/td><\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">coords<\/td><td>\n\n<p>List of coordinates (separated by <code>;<\/code>) are interpreted depending on the geometry parameter as follows:<\/p>\n\n<ul>\n  <li>In the case of <code>circle<\/code>geometry, the parameter includes just one element, which\n  is the center of the circle.<\/li>\n  <li>In the case of <code>polygon<\/code>includes a list of elements, which are the vertices of\n  the polygon.<\/li>\n<\/ul>\n\n<\/td><\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">attrs<\/td>\n    <td>Comma-separated list of attribute names which data will be included in the response. If this parameter is not\n    included, all the attributes are retrieved.<\/td>\n<\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">limit<\/td><td>Limit the number of entities to be retrieved<\/td><\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">offset<\/td><td>Skip a number of records<\/td><\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">options<\/td><td>\nThis operation supports two options:\n\n<ul>\n  <li><code>count<\/code>: when used, the total entities number is returned as a HTTP in the response name <code>X-Total-Count<\/code>.<\/li>\n  <li><code>cannonical<\/code>: when used, the response payload used the \"cannonical form\". See JSON entity representation format section\n  for details.<\/li>\n<\/td><\/tr>\n<\/table>\n\nThe response payload is an Array which contains one object per matching entity. Each entity follows\nthe JSON entity representation format (described in a section above).\n\nResponse code:\n\n* Successful operation uses 200 OK\n* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.\n\n+ Parameters\n    + limit: 20 (optional, number)\n    + offset: 20 (optional, number)\n    + type: Room (optional, string)\n    + id: Bcn_Welt (optional, string)\n    + idPattern: (optional, string)\n\n+ Response 200 (application/json)\n\n        [\n         {\n            \"type\": \"Room\",\n            \"id\": \"DC_S1-D41\",\n            \"temperature\": 35.6\n         },\n         {\n            \"type\": \"Room\",\n            \"id\": \"Boe-Idearium\",\n            \"temperature\": 22.5\n         },\n         {\n            \"type\": \"Car\",\n            \"id\": \"P-9873-K\",\n            \"speed\": {\n                \"value\": 100,\n                \"type\": \"number\",\n                \"accuracy\": 2,\n                \"timestamp\": {\n                    \"value\": \"2015-06-04T07:20:27.378Z\",\n                    \"type\": \"date\"\n                }\n            }\n         }\n        ]\n\n### Create entity [POST /v2/entities]\n\nThe payload is an object representing the entity to be created. The object follows\nthe JSON entity representation format (described in a section above).\n\nResponse:\n\n* Successful operation uses 201 Created. Reponse includes a `Location` header with the URL of the\n  created entity.\n* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.\n\n+ Request (application/json)\n\n        {\n            \"type\": \"Room\",\n            \"id\": \"Bcn-Welt\",\n            \"temperature\": 21.7,\n            \"humidity\": 60,\n            \"location\": {\n                \"value\":  \"41.3763726, 2.1864475\",\n                \"type\": \"geo:point\",\n                \"crs\": \"WGS84\"\n            },\n        }\n\n+ Response 201\n\n    + Headers\n\n            Location: /v2/entities/Bcn-Welt\n\n\n## Entity by ID [/v2/entities/{entityId}{?attrs,options}]\n\n### Retrieve entity [GET /v2/entities/{entityId}{?attrs}]\n\n<table style=\"width: 100%; margin: 12px 0 0 0;\">\n<tr><td colspan=\"2\"><strong>Required Parameters<\/strong><\/td><\/tr>\n<tr><td colspan=\"2\">none<\/td><\/tr>\n<tr><td colspan=\"2\"><strong>Optional Parameters<\/strong><\/td><\/tr>\n<tr>\n  <td style=\"padding-right: 40px; width: 140px;\">attrs<\/td>\n  <td>Comma-separated list of attribute names which data will be included in the response. If this parameter is not\n  included, all the attributes are retrieved.<\/td>\n<\/tr>\n<\/table>\n\nThe response is an object representing the entity identified by the ID. The object follows\nthe JSON entity representation format (described in a section above).\n\nThis operation must return only one entity element, but it may happen that there are more\nthan one entity with the same ID (e.g. entities with same ID but different type). In those cases\nan error mesage is returned, specifying in the description the URL that could be used to get\nthe list of conflicting entities, i.e. all the entities with such an ID.\n\nResponse:\n\n* Successful operation uses 200 OK\n* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity Id.\n    + attrs: temperature,humidity (optional, string) - Attributes to be retrieved. Coma separated list.\n\n+ Response 200 (application/json)\n\n        {\n            \"type\": \"Room\",\n            \"id\": \"Bcn_Welt\",\n            \"temperature\": 21.7,\n            \"humidity\": 60,\n            \"location\": {\n                \"value\":  \"41.3763726, 2.1864475\",\n                \"type\": \"geo:point\",\n                \"crs\": \"WGS84\"\n            }\n        }\n\n### Update or append entity attributes [POST /v2/entities/{entityId}?{options}]\n\n<table style=\"width: 100%; margin: 12px 0 0 0;\">\n<tr><td colspan=\"2\"><strong>Required Parameters<\/strong><\/td><\/tr>\n<tr><td colspan=\"2\">none<\/td><\/tr>\n<tr><td colspan=\"2\"><strong>Optional Parameters<\/strong><\/td><\/tr>\n<tr>\n  <td style=\"padding-right: 40px; width: 140px;\">op<\/td>\n  <td>Operation options. Allowed values: <code>append<\/code>.<\/td>\n<\/tr>\n<\/table>\n\nThe request payload is an object representing the attributes to append or update. The object follows\nthe JSON entity representation format (described in a section above), except that `id` and `type`\nare not allowed.\n\nThe entity attributes are updated with the ones in the payload. In particular, depending on\nwhether `append` option is used or not.\n\n* If `append` is not used: the entity attributes are updated (if they previously exist) or appended\n  (in they don\'t previously exists) with the ones in the payload.\n* If `append` is used (i.e. strict append semantics): all the attributes in the payload not previously\n  existing in the entity are appended. In addition to that, in the case some of the attributes in the\n  payload already exist in the entity, an error if returned.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + options: append (optional, string) - Strict append.\n\n+ Request (application/json)\n\n    + Body\n\n            {\n                \"ambientNoise\": 31.5\n            }\n\n+ Response 204\n\n### Update existing entity attributes [PATCH /v2/entities/{entityId}]\n\nThe request payload is an object representing the attributes to update. The object follows\nthe JSON entity representation format (described in a section above), except that `id` and `type`\nare not allowed.\n\nThe entity attributes are updated with the ones in the payload. In addition to that, if one or more\nattributes in the payload doesn\'t exist in the entity, an error if returned.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.\n\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n\n+ Request (application/json)\n\n        {\n            \"temperature\": 25.5,\n            \"seatsNumber\": 6\n        }\n\n+ Response 204\n\n### Replace all entity attributes [PUT /v2/entities/{entityId}]\n\nThe request payload is an object representing the new entity attributes. The object follows\nthe JSON entity representation format (described in a section above), except that `id` and `type`\nare not allowed.\n\nThe attributes previously existing in the entity are removed and replaced by the ones in the\nrequest.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n\n+ Request (application/json)\n\n        {\n            \"temperature\": 25.5,\n            \"seatsNumber\": 6\n        }\n\n+ Response 204\n\n### Remove entity atributes [DELETE /v2/entities/{entityId}?{attrs}]\n\n<table style=\"width: 100%; margin: 12px 0 0 0;\">\n<tr><td colspan=\"2\"><strong>Required Parameters<\/strong><\/td><\/tr>\n<tr><td colspan=\"2\">none<\/td><\/tr>\n<tr><td colspan=\"2\"><strong>Optional Parameters<\/strong><\/td><\/tr>\n<tr>\n  <td style=\"padding-right: 40px; width: 140px;\">attrs<\/td>\n  <td>Comma-separated list of attribute names which data will be removed. If this parameter is not\n  included, the entity itself is removed.<\/td>\n<\/tr>\n<\/table>\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.\n\n+ Parameters\n    + entityId: Boe_Idearium (required, string) - Entity ID\n    + attrs: temperature,humidity (optional, string) - Attributes to be removed. Coma separated list.\n\n+ Response 204\n\n## Entity by type and ID [/v2/entities/type/{entityType}/id/{entityId}{?attrs,options}]\n\n### Retrieve entity [GET /v2/entities/type/{entityType}/id/{entityId}?{attrs}]\n\n<table style=\"width: 100%; margin: 12px 0 0 0;\">\n<tr><td colspan=\"2\"><strong>Required Parameters<\/strong><\/td><\/tr>\n<tr><td colspan=\"2\">none<\/td><\/tr>\n<tr><td colspan=\"2\"><strong>Optional Parameters<\/strong><\/td><\/tr>\n<tr>\n  <td style=\"padding-right: 40px; width: 140px;\">attrs<\/td>\n  <td>Comma-separated list of attribute names which data will be included in the response. If this parameter is not\n  included, all the attributes are retrieved.<\/td>\n<\/tr>\n<\/table>\n\nThe response is an object representing the entity identified by the type and ID. The object\nfollows the JSON entity representation format (described in a section above).\n\nThis operation must return only one entity element, but it may happen that there are more\nthan one entity with the same ID and type (e.g. entities with same ID and type in different\nservice paths). In those cases  an error mesage is returned, specifying in the description the\nURL that could be used to get the list of conflicting entities, i.e. all the entities with such type and ID.\n\nResponse:\n\n* Successful operation uses 20O OK\n* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.\n\n+ Parameters\n    + entityId: Boe_Idearium (required, string) - Entity ID\n    + entityType: Room (required, string) - Entity Type\n    + attrs: temperature, humidity (optional, string) - Attributes to be retrieved. Coma separated list.\n\n+ Response 200 (application/json)\n\n        {\n            \"type\": \"Room\",\n            \"id\": \"Bcn_Welt\",\n            \"temperature\": 21.7,\n            \"humidity\": 60,\n            \"location\": {\n                \"value\":  \"41.3763726, 2.1864475\",\n                \"type\": \"geo:point\",\n                \"crs\": \"WGS84\"\n            }\n        }\n\n### Update or append entity attributes [POST /v2/entities/type/{entityType}/id/{entityId}?{options}]\n\n<table style=\"width: 100%; margin: 12px 0 0 0;\">\n<tr><td colspan=\"2\"><strong>Required Parameters<\/strong><\/td><\/tr>\n<tr><td colspan=\"2\">none<\/td><\/tr>\n<tr><td colspan=\"2\"><strong>Optional Parameters<\/strong><\/td><\/tr>\n<tr>\n  <td style=\"padding-right: 40px; width: 140px;\">op<\/td>\n  <td>Operation options. Allowed values: <code>append<\/code>.<\/td>\n<\/tr>\n<\/table>\n\nThe request payload is an object representing the attributes to append or update. The object follows\nthe JSON entity representation format (described in a section above), except that `id` and `type`\nare not allowed.\n\nThe entity attributes are updated with the ones in the payload. In particular, depending on\nwhether `append` option is used:\n\n* If `append` is not used: the entity attributes are updated (if they previously exist) or appended\n  (in they don\'t previously exists) with the ones in the payload.\n* If `append` is used (i.e. strict append semantics): all the attributes in the payload not previously\n  existing in the entity are appended. In addition to that, in the case some of the attributes in the\n  payload already exist in the entity, an error if returned.\n\nResponse:\n\n* Successful operation uses 204 No Content.\n* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + entityType: Room (required, string) - Entity Type\n    + options: append (optional, string) - Strict append.\n\n+ Request (application/json)\n\n    + Body\n\n            {\n                \"ambientNoise\": 31.5\n            }\n\n+ Response 204\n\n### Update existing entity attributes [PATCH /v2/entities/type/{entityType}/id/{entityId}]\n\nThe request payload is an object representing the attributes to update. The object follows\nthe JSON entity representation format (described in a section above), except that `id` and `type`\nare not allowed.\n\nThe entity attributes are updated with the ones in the payload. In addition to that, if one or more\nattributes in the payload doesn\'t exist in the entity, an error if returned.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + entityType: Room (required, string) - Entity Type\n\n+ Request (application/json)\n\n        {\n            \"temperature\": 25.5,\n            \"seatsNumber\": 6\n        }\n\n+ Response 204\n\n### Replace all entity attributes [PUT /v2/entities/type/{entityType}/id/{entityId}]\n\nThe request payload is an object representing the new entity attributes. The object follows\nthe JSON entity representation format (described in a section above), except that `id` and `type`\nare not allowed.\n\nThe attributes previously existing in the entity are removed and replaced by the ones in the\nrequest.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + entityType: Room (required, string) - Entity Type\n\n+ Request (application/json)\n\n        {\n            \"temperature\": 25.5,\n            \"seatsNumber\": 6\n        }\n\n+ Response 204\n\n### Remove entity attributes [DELETE /v2/entities/type/{entityType}/id/{entityId}?{attrs}]\n\n<table style=\"width: 100%; margin: 12px 0 0 0;\">\n<tr><td colspan=\"2\"><strong>Required Parameters<\/strong><\/td><\/tr>\n<tr><td colspan=\"2\">none<\/td><\/tr>\n<tr><td colspan=\"2\"><strong>Optional Parameters<\/strong><\/td><\/tr>\n<tr>\n  <td style=\"padding-right: 40px; width: 140px;\">attrs<\/td>\n  <td>Comma-separated list of attribute names which data will be removed. If this parameter is not\n  included, the entity itself is removed.<\/td>\n<\/tr>\n<\/table>\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.\n\n+ Parameters\n    + entityId: Boe_Idearium (required, string) - Entity ID\n    + entityType: Room (required, string) - Entity Type\n    + attrs: temperature,humidity (optional, string) - Attributes to be deleted. Coma separated list.\n\n+ Response 204\n\n## Attribute by Entity ID [/v2/entities/{entityId}/attrs/{attrName}]\n\n### Get attribute data [GET /v2/entities/{entityId}/attrs/{attrName}]\n\nReturns a JSON object with the attribute data of the attribute. The object follows the JSON representation for attributes\n(described in a section above).\n\nResponse:\n\n* Successful operation uses 20O OK.\n* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + attrName: temperature (required, string) - Attribute to be retrieved.\n\n+ Response 200 (application/json)\n\n        {\n            \"value\": 21.7\n        }\n\n### Update attribute data [PUT /v2/entities/{entityId}/attrs/{attrName}]\n\nThe request payload is an object representing the new attributes data. Previous attribute data\nis replaced by the one in the request. The object follows the JSON representation for attributes\n(described in a section above).\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + attrName: temperature (required, string) - Attribute name\n\n+ Request (application/json)\n\n        {\n            \"value\": 25.0,\n            \"unitCode\": \"CEL\"\n        }\n\n+ Response 200\n\n\n### Remove a single attribute [DELETE /v2/entities/{entityId}/attrs/{attrName}]\n\nRemoves an entity attribute.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + attrName: temperature (required, string) - Attribute name\n\n+ Response 204\n\n## Attribute by Entity Type and ID [/v2/entities/type/{entityType}/id/{entityId}/attrs/{attrName}]\n\n### Get attribute data [GET /v2/entities/type/{entityType}/id/{entityId}/attrs/{attrName}]\n\nReturns a JSON object with the attribute data of the attribute. The object follows the JSON representation for attributes\n(described in a section above).\n\nResponse:\n\n* Successful operation uses 20O OK.\n* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + entityType: Room (required, string) - Entity Type\n    + attrName: temperature (required, string) - Attribute to be retrieved.\n\n+ Response 200 (application/json)\n\n        {\n            \"value\": 21.7\n        }\n\n### Update attribute data [PUT /v2/entities/type/{entityType}/id/{entityId}/attrs/{attrName}]\n\nThe request payload is an object representing the new attributes data. Previous attribute data is replaced\nby the one in the request. The object follows the JSON representation for attributes\n(described in a section above).\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + entityType: Room (required, string) - Entity Type\n    + attrName: temperature (required, string) - Attribute name\n\n+ Request (application/json)\n\n        {\n            \"value\": 25.0,\n            \"unitCode\": \"CEL\"\n        }\n\n+ Response 200\n\n\n### Remove a single attribute [DELETE /v2/entities/type/{entityType}/id/{entityId}/attrs/{attrName}]\n\nRemoves the attribute from the entity.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + entityType: Room (required, string) - Entity Type\n    + attrName: temperature (required, string) - Attribute name\n\n+ Response 204\n\n## Attribute Value by Entity ID [/v2/entities/{entityId}/attrs/{attrName}/value{?options}]\n\n### Get attribute data [GET /v2/entities/{entityId}/attrs/{attrName}/value{?options}]\n\n<table style=\"width: 100%; margin: 12px 0 0 0;\">\n<tr><td colspan=\"2\"><strong>Required Parameters<\/strong><\/td><\/tr>\n<tr><td colspan=\"2\">none<\/td><\/tr>\n<tr><td colspan=\"2\"><strong>Optional Parameters<\/strong><\/td><\/tr>\n<tr>\n  <td style=\"padding-right: 40px; width: 140px;\">options<\/td>\n  <td>Operation opations. Allowed values: <code>text<\/code>.<\/td>\n<\/tr>\n<\/table>\n\nIt returns a JSON object with a `value` propierty with the value of the attribute. The `text` option\nindicates that the attribute value must be provided as plain text (text/plain).\n\nResponse:\n\n* Successful operation uses 20O OK.\n* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + attrName: temperature (required, string) - Attribute to be retrieved.\n\n+ Response 200 (application/json)\n\n        {\n            \"value\": 21.7\n        }\n\n### Update attribute value [PUT /v2/entities/{entityId}/attrs/{attrName}/value]\n\nThe request payload is the new attribute value. It can be represented as a JSON object (application/json),\nwith a `value` property, or as plain text (text/plain).\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + attrName: temperature (required, string) - Attribute name\n\n+ Request (application/json)\n\n        {\n            \"value\": 25.0\n        }\n\n+ Response 200\n\n## Attribute Value by Entity type and ID [/v2/entities/type/{entityType}/id/{entityId}/attrs/{attrName}/value{?options}]\n\n### Get attribute data [GET /v2/entities/type/{entityType}/id/{entityId}/attrs/{attrName}/value{?options}]\n\n<table style=\"width: 100%; margin: 12px 0 0 0;\">\n<tr><td colspan=\"2\"><strong>Required Parameters<\/strong><\/td><\/tr>\n<tr><td colspan=\"2\">none<\/td><\/tr>\n<tr><td colspan=\"2\"><strong>Optional Parameters<\/strong><\/td><\/tr>\n<tr>\n  <td style=\"padding-right: 40px; width: 140px;\">options<\/td>\n  <td>Operation opations. Allowed values: <code>text<\/code>.<\/td>\n<\/tr>\n<\/table>\n\nIf the `text` option is not used, returns a JSON object which the `value` of the attribute. If the\n`text` option is used returns the attribute value in plain text.\n\nResponse:\n\n* Successful operation uses 20O OK.\n* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + entityType: Room (required, string) - Entity Type\n    + attrName: temperature (required, string) - Attribute to be retrieved.\n\n+ Response 200 (application/json)\n\n        {\n            \"value\": 21.7\n        }\n\n### Update attribute value [PUT /v2/entities/type/{entityType}/id/{entityId}/attrs/{attrName}/value]\n\nThe request payload is the new attribute value. It can be represented as a JSON object (application/json),\nwith a `value` property, or as plain text (text/plain).\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + entityType: Room (required, string) - Entity Type\n    + attrName: temperature (required, string) - Attribute name\n\n+ Request (application/json)\n\n        {\n            \"value\": 25.0\n        }\n\n+ Response 200\n\n## Entity types [/v2/types{?limit,offset,options}]\n\n### Retrieve entity types [GET /v2/types/{?limit,offset,options}]\n\n<table style=\"width: 100%; margin: 12px 0 0 0;\">\n<tr><td colspan=\"2\"><strong>Required Parameters<\/strong><\/td><\/tr>\n<tr><td colspan=\"2\">none<\/td><\/tr>\n<tr><td colspan=\"2\"><strong>Optional Parameters<\/strong><\/td><\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">limit<\/td><td>Limit the number of types to be retrieved<\/td><\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">offset<\/td><td>Skip a number of records<\/td><\/tr>\n<tr><td style=\"padding-right: 40px; width: 140px;\">options<\/td><td>\nThis operation supports two options:\n\n<ul>\n  <li><code>count<\/code>: when used, the total types number is returned as a HTTP in the\n  response name <code>X-Total-Count<\/code>.<\/li>\n  <li><code>collapsed<\/code>: when used, the response payload is a JSON array with a\n  list of entity types.<\/li>\n<\/td><\/tr>\n<\/table>\n\nReturns a list of entity types, either as JSON object (including the union set of attribute names along all the entities in each type) or\na JSON array (just type name), depending on the `collapsed` option.\n\nResponse code:\n\n* Successful operation uses 200 OK\n* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.\n\n+ Parameters\n    + limit: 20 (optional, number)\n    + offset: 20 (optional, number)\n\n+ Response 200 (application/json)\n\n        {\n         \"Car\": [\n            \"speed\",\n            \"fuel\",\n            \"temperature\"\n         ],\n         \"Room\": [\n            \"pressure\",\n            \"hummidity\",\n            \"temperature\"\n         ]\n        }\n\n## Entity type [/v2/type/{entityType}]\n\n### Retrieve entity type [GET /v2/type/{entityType}]\n\nReturns the union set of attribute names along all the entities belonging to the type as a JSON array.\n\nResponse code:\n\n* Successful operation uses 200 OK\n* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.\n\n+ Parameters\n    + entityType: Room (required, string) - Entity Type\n\n+ Response 200 (application/json)\n\n        [\n            \"pressure\",\n            \"hummidity\",\n            \"temperature\"\n        ]\n\n## Context Subscriptions [/v2/entities/{entityId}/subscriptions]\n\nA subscription is represented by a JSON object with the following fields:\n\n* `id`: Subscription unique identifier. Automatically created at creation time.\n* `subject` : It s an object that describes the subject of the subscription.\n* `notification` : It is an object that describes the notification received by the subscriber.\n* `options` : It is a dictionary which can contain different parameters related to the subscription, including:\n  * `duration`: Duration of the subscription in ISO8601 format. Infinite if not specified.\n\nA \'subject\' contains the following subfields:\n\n* `entity` : Id or pattern id which identifies the affected entities (optional)\n* `type` : Type of the affected entities (optional)\n* `attributes`: List of attributes to be monitored (if not specified it would mean all)\n* `condition`: Condition that will trigger the notification. It could be \'ONCHANGE\' or \'ONTIMEINTERVAL\'.\nBy default will be ONCHANGE.\n* `expression`: Logical the expression on attributes. When its evaluation results in a\n`true` value the notification will be sent.\n\nEntity or type must be present.\n\nPlease note that at the time of writing the editors are considering different options\nto model these parameters, thus this is likely to change.\n\nA \'notification\' object contains the following subfields:\n\n* `attributes`: List of attributes to be included in the notification message.\nIf not specified they will be the same as those which are monitored\n* `callback` : URL that will point to the service which will be invoked when a notification is generated\n* `throttling`: A period of time (in ISO8601 format) which must ellapse between two consecutive notifications.\n\n### List subscriptions [GET /v2/subscriptions]\n\nReturns a list of all the subscriptions present in the system\n\n+ Response 200\n\n        [\n            {\n                \"id\": \"abcdefg\",\n                \"subject\": {\n                    \"entity\": \"Bcn_Welt\",\n                    \"type\": \"Room\",\n                    \"attributes\": [\n                        \"temperature\"\n                    ],\n                    \"condition\": \"ONCHANGE\"\n                },\n                \"notification\": {\n                    \"callback\": \"http://localhost:1234\",\n                    \"attributes\": [\"temperature\", \"humidity\"],\n                    \"throttling\": \"PT5S\"\n                },\n                \"options\": {\n                    \"duration\": \"PT1M\"\n                }\n            }\n        ]\n\n### Create a new subscription [POST /v2/subscriptions]\n\nCreates a new subscription.\nThe subscription is represented by a JSON object as described at the beginning of this section.\n\n+ Request (application/json)\n\n        {\n            \"subject\": {\n                \"type\": \"Room\",\n                \"attributes\": [\n                      \"humidity\"\n                ],\n                \"condition\": \"ONTIMEINTERVAL\"\n            },\n            \"notification\": {\n                \"callback\": \"http://localhost:1234\",\n                \"attributes\": [\"temperature\", \"humidity\"],\n                \"throttling\": \"PT5S\"\n            },\n            \"options\": {\n                \"duration\": \"PT1M\"\n            }\n        }\n\n+ Response 201\n\n    + Headers\n\n            Location: /v2/subscriptions/abcde98765\n\n## Context Provider Registration [/v2/registrations]\n\nContext Registration allows to associate external services to context data. One of the main\nuse cases of this functionality is the association of Context Providers.\n\nA context registration is represented by a JSON object with the following fields:\n\n* `id`: Unique identifier assigned to the registration. Automatically created at creation time.\n* `subject` : It s an object that describes the subject of the registration.\n* `callback` : URL of the service which is registered. In the case of a Context Provider\ncorresponds to the URL of the provider service.\n* `options` : It is a dictionary which can contain different parameters related to the registration, namely:\n  * `duration`: Duration of the registration in ISO8601 format. Default duration is infinite.\n\nA `subject` contains the following subfields:\n\n* `entity` : Id or pattern id which identifies the affected entities (optional).\n* `type` : Type of the affected entities (optional).\n* `attributes`: List of attributes to be provided (if not specified it would mean all).\n\nEntity or type must be present.\n\n### List registrations [GET /v2/registrations]\n\nLists all the registrations present in the system.\n\n+ Response 200\n\n        [\n            {\n                \"id\": \"abcdefg\",\n                \"subject\": {\n                    \"entity\": \"Bcn_Welt\",\n                    \"type\": \"Room\",\n                    \"attributes\": [\n                        \"temperature\"\n                    ]\n                },\n                \"callback\": \"http://localhost:1234\",\n                \"options\": {\n                    \"duration\": \"PT1M\"\n                }\n            }\n        ]\n\n### Context provider registration [POST /v2/registrations]\n\nCreates a new registration. This is typically used for associating context providers\nto certain data.\nThe registration is represented by a JSON object as described at the beginning of this section.\n\n+ Request (application/json)\n\n        {\n            \"subject\": {\n                \"type\": \"Room\",\n                \"attributes\": [\n                      \"humidity\"\n                ]\n            },\n            \"callback\":  \"http://localhost:1234\",\n            \"options\": {\n                \"duration\": \"PT1M\"\n            }\n        }\n\n+ Response 201\n\n    + Headers\n\n            Location: /v2/registrations/abcde98765\n\n\n## OMA-NGSI Operations [/v2/queryContext]\n\nFor the sake of completness here is an enumeration of the OMA-NGSI (9 & 10) operations. Those\noperations will be supported under the \'v2\' resource as well.\n\n### queryContext [POST /v2/queryContext]\n\n### updateContext [POST /v2/updateContext]\n\n### subscribeContext [POST /v2/subscribeContext]\n\n### updateContextSubscription [POST /v2/updateContextSubscription]\n\n### unsubscribeContext [POST /v2/unsubscribeContext]\n\n### notifyContext [POST /v2/notifyContext]\n\n### registerContext [POST /v2/registerContext]\n\n### discoverContextAvailability [POST /v2/discoverContextAvailability]\n\n### subscribeContextAvailability [POST /v2/subscribeContextAvailability]\n\n### updateContextAvailabilitySubscription [POST /v2/updateContextAvailabilitySubscription]\n\n### unsubscribeContextAvailability [POST /v2/unsubscribeContextAvailability]\n\n### notifyContextAvailability [POST /v2/notifyContextAvailability]\n"
    });
  </script>
</body>
</html>
